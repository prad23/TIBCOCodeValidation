<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:ns51="http://www.wsgc.com/schemas/common/PaymentServiceProcessorReturnCodes.xsd" xmlns:pfx="http://www.tibco.com/schemas/Payment Services/CreditAuthResponseSchema.xsd" xmlns:ns="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns12="http://www.ultimosoft.com/CLEH/ExceptionHandler.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns2="http://www.wsgc.com/schemas/common/PaymentGatewayAuthorizationStatusCodes.xsd" xmlns:ns3="http://www.wsgc.com/schemas/common/PaymentServiceCreditAuthorizationValidity.xsd" xmlns:ns4="http://www.wsgc.com/schemas/common/PaymentServiceWSIDeclineRules.xsd" xmlns:pfx2="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XMLSchemas/Verifone/CreditPreAuthorizationResponse.xsd" xmlns:ns5="http://www.services.wsgc.com/2014/Payment/Verfione/UGP/Credit/PreAuthorizationResponse" xmlns:pfx3="http://services.wsgc.com/2014/Payment" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns6="http://www.wsgc.com/schemas/common/PaymentServicePPCVTypeValues.xsd" xmlns:ns7="http://www.tibco.com/schemas/PaymentServices/SharedResources/PaymentServiceInternal/RECON_RETURN_CC_PLCC.xsd" xmlns:ns8="http://www.tibco.com/schemas/PaymentServices/SharedResources/PaymentServiceInternal/PaymentServiceInternal/PaymentServiceInternal/RECON_RETURN_CC_PLCC.xsd" xmlns:ns9="http://paymentservice.wsgc.com/2014/PaymentServices/SharedResources/XMLSchemas/PaymentServiceInternal/credit-reconciliationrequest.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx7="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XMLSchemas/Common/PaymentServiceConfigurations.xsd" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:pfx8="http://www.services.wsgc.com/2014/Payment/Verfione/UGP/Credit/ReturnResponse" xmlns:pfx71="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pfx61="http://ecommerce.wsgc.com/2013/Common">
    <xsd:import namespace="http://www.tibco.com/schemas/Payment Services/CreditAuthResponseSchema.xsd" schemaLocation="/CreditAuthResponse Schema.xsd"/>
    <xsd:import namespace="http://ecommerce.wsgc.com/2013/Common" schemaLocation="/SharedResources/XMLSchemas/2013/Common/base-types.xsd"/>
    <xsd:import namespace="http://services.wsgc.com/2014/Payment" schemaLocation="/SharedResources/XMLSchemas/2014/Payment/credit-return.xsd"/>
    <xsd:import namespace="http://paymentservice.wsgc.com/2014/PaymentServices/SharedResources/XMLSchemas/PaymentServiceInternal/credit-reconciliationrequest.xsd" schemaLocation="/SharedResources/XMLSchemas/PaymentServiceInternal/credit-reconciliationrequest.xsd"/>
    <pd:name>BusinessProcesses/CreditReturn/ResponseProcessors/MapPaymentServiceResponse-CC.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="paymentgatewayresponse" type="xsd:string"/>
                    <xsd:element ref="pfx3:CreditCardReturnRequest"/>
                    <xsd:element name="PAN" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="TenderSubCode" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="Error" type="pfx61:ErrorType" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>78</pd:startX>
    <pd:startY>254</pd:startY>
    <pd:returnBindings>
        <xsl:choose>
            <xsl:when test="string-length($MapErrorResponse/pfx3:CreditCardReturnResponse/@version)>0">
                <xsl:copy-of select="$MapErrorResponse/pfx3:CreditCardReturnResponse"/>
            </xsl:when>
            <xsl:when test="string-length($ValidatePaymentGatewayResponse/root/pfx3:CreditCardReturnResponse/@version) > 0">
                <xsl:copy-of select="$ValidatePaymentGatewayResponse/root/pfx3:CreditCardReturnResponse"/>
            </xsl:when>
            <xsl:when test="string-length($ProcessPaymentGatewayResponse/root/Error/Type) > 0">
                <pfx3:CreditCardReturnResponse>
                    <xsl:attribute name="version">
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/MessageVersion"/>
                    </xsl:attribute>
                    <SystemContext>
                        <EnvironmentIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                        </EnvironmentIdentifier>
                        <RegionIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                        </RegionIdentifier>
                        <SourceSystemIdentifier>
                            <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                        </SourceSystemIdentifier>
                        <xsl:choose>
                            <xsl:when test="string-length($Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId)>0">
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,$Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId)"/>
                                </TransactionId>
                            </xsl:when>
                            <xsl:otherwise>
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV,BW:getHostName())"/>
                                </TransactionId>
                            </xsl:otherwise>
                        </xsl:choose>
                        <TransactionTime>
                            <xsl:value-of select="current-dateTime()"/>
                        </TransactionTime>
                    </SystemContext>
                    <xsl:copy-of select="$Start/root/pfx3:CreditCardReturnRequest/PaymentContext"/>
                    <Error>
                        <Type>
                            <xsl:value-of select="$ProcessPaymentGatewayResponse/root/Error/Type"/>
                        </Type>
                        <xsl:for-each select="$ProcessPaymentGatewayResponse/root/Error/Detail">
                            <Detail>
                                <xsl:value-of select="."/>
                            </Detail>
                        </xsl:for-each>
                        <ErrorMessage>
                            <xsl:value-of select="$ProcessPaymentGatewayResponse/root/Error/ErrorMessage"/>
                        </ErrorMessage>
                        <xsl:if test="string-length($GetLocalToken/root/TokenDetails)>0">
                            <Tender>
                                <Type>
                                    <Code>
                                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/Tender/Type/Code"/>
                                    </Code>
                                    <xsl:choose>
                                        <xsl:when test="string-length($Start/root/TenderSubCode)>0">
                                            <SubCode>
                                                <xsl:value-of select="$Start/root/TenderSubCode"/>
                                            </SubCode>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <SubCode>
                                                <xsl:value-of select="&quot;&quot;"/>
                                            </SubCode>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </Type>
                                <Token>
                                    <xsl:attribute name="scheme">
                                        <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scheme"/>
                                    </xsl:attribute>
                                    <xsl:if test="$GetLocalToken/root/TokenDetails/Scope">
                                        <xsl:attribute name="scope">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scope"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:attribute name="expiration">
                                        <xsl:value-of select="$GetLocalToken/root/TokenDetails/Expiration"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$GetLocalToken/root/TokenDetails/Token"/>
                                </Token>
                                <xsl:if test="$_globalVariables/ns:GlobalVariables/Return/Flags/RETURN_WSI_MARKETING_HASH_WITH_LOCAL_TOKEN=&quot;true&quot;">
                                    <Hash>
                                        <xsl:attribute name="scheme">
                                            <xsl:value-of select="$GenMktHash-1/root/TokenDetails/WSIMatchingTokenScheme"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$GenMktHash-1/root/TokenDetails/WSIMatchingTokenValue"/>
                                    </Hash>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM)>0">
                                        <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM"/>
                                            </MaskedAccountNumber>
                                        </xsl:if>
                                    </xsl:when>
                                    <xsl:when test="string-length($Start/root/PAN)>0">
                                        <MaskedAccountNumber>
                                            <xsl:value-of select="concat( tib:pad-and-limit(tib:left($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayFirst),(string-length($Start/root/PAN)-$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast),$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountMaskCharecter), tib:right($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast))"/>
                                        </MaskedAccountNumber>
                                    </xsl:when>
                                </xsl:choose>
                            </Tender>
                        </xsl:if>
                    </Error>
                </pfx3:CreditCardReturnResponse>
            </xsl:when>
            <xsl:when test="string-length($Start/root/Error/Type) > 0">
                <pfx3:CreditCardReturnResponse>
                    <xsl:attribute name="version">
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/MessageVersion"/>
                    </xsl:attribute>
                    <SystemContext>
                        <EnvironmentIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                        </EnvironmentIdentifier>
                        <RegionIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                        </RegionIdentifier>
                        <SourceSystemIdentifier>
                            <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                        </SourceSystemIdentifier>
                        <xsl:choose>
                            <xsl:when test="string-length($Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId)>0">
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,$Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId)"/>
                                </TransactionId>
                            </xsl:when>
                            <xsl:otherwise>
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV,BW:getHostName())"/>
                                </TransactionId>
                            </xsl:otherwise>
                        </xsl:choose>
                        <TransactionTime>
                            <xsl:value-of select="current-dateTime()"/>
                        </TransactionTime>
                    </SystemContext>
                    <xsl:copy-of select="$Start/root/pfx3:CreditCardReturnRequest/PaymentContext"/>
                    <Error>
                        <Type>
                            <xsl:value-of select="$Start/root/Error/Type"/>
                        </Type>
                        <xsl:for-each select="$Start/root/Error/Detail">
                            <Detail>
                                <xsl:value-of select="."/>
                            </Detail>
                        </xsl:for-each>
                        <ErrorMessage>
                            <xsl:value-of select="$Start/root/Error/ErrorMessage"/>
                        </ErrorMessage>
                        <xsl:if test="string-length($GetLocalToken/root/TokenDetails/Token)>0">
                            <Tender>
                                <Type>
                                    <Code>
                                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/Tender/Type/Code"/>
                                    </Code>
                                    <xsl:choose>
                                        <xsl:when test="string-length($Start/root/TenderSubCode)>0">
                                            <SubCode>
                                                <xsl:value-of select="$Start/root/TenderSubCode"/>
                                            </SubCode>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <SubCode>
                                                <xsl:value-of select="&quot;&quot;"/>
                                            </SubCode>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </Type>
                                <Token>
                                    <xsl:attribute name="scheme">
                                        <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scheme"/>
                                    </xsl:attribute>
                                    <xsl:if test="$GetLocalToken/root/TokenDetails/Scope">
                                        <xsl:attribute name="scope">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scope"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:attribute name="expiration">
                                        <xsl:value-of select="$GetLocalToken/root/TokenDetails/Expiration"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="isTemporary">
                                        <xsl:value-of select="true()"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$GetLocalToken/root/TokenDetails/Token"/>
                                </Token>
                                <xsl:if test="$_globalVariables/ns:GlobalVariables/Return/Flags/RETURN_WSI_MARKETING_HASH_WITH_LOCAL_TOKEN=&quot;true&quot;">
                                    <Hash>
                                        <xsl:attribute name="scheme">
                                            <xsl:value-of select="$GenMktHash-1/root/TokenDetails/WSIMatchingTokenScheme"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$GenMktHash-1/root/TokenDetails/WSIMatchingTokenValue"/>
                                    </Hash>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM)>0">
                                        <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM"/>
                                            </MaskedAccountNumber>
                                        </xsl:if>
                                    </xsl:when>
                                    <xsl:when test="string-length($Start/root/PAN)>0">
                                        <MaskedAccountNumber>
                                            <xsl:value-of select="concat( tib:pad-and-limit(tib:left($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayFirst),(string-length($Start/root/PAN)-$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast),$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountMaskCharecter), tib:right($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast))"/>
                                        </MaskedAccountNumber>
                                    </xsl:when>
                                </xsl:choose>
                            </Tender>
                        </xsl:if>
                    </Error>
                </pfx3:CreditCardReturnResponse>
            </xsl:when>
            <xsl:otherwise>
                <xsl:copy-of select="$MapPaymentServiceResponse/pfx3:CreditCardReturnResponse"/>
            </xsl:otherwise>
        </xsl:choose>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx3:CreditCardReturnResponse"/>
    <pd:endX>1010</pd:endX>
    <pd:endY>39</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables>
        <FinancialDate>
            <xsd:element name="root">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="FinancialDate" type="xsd:date"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </FinancialDate>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1414172991752</pd:targetNamespace>
    <pd:activity name="CalculateLastDateOfMonth">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>912</pd:x>
        <pd:y>410</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/CalculateLastDateOfMonth.process</processName>
        </config>
        <pd:inputBindings>
            <Date>
                <month>
                    <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE)>0)&#xA; then &#xA;tib:get-month-from-date(tib:parse-date('MMddyyyy',$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE))&#xA;else&#xA;$Start/root/pfx3:CreditCardReturnRequest/CardMetadata/CardExpiration/Month"/>
                </month>
                <year>
                    <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE)>0)&#xA; then &#xA;tib:get-year-from-date(tib:parse-date('MMddyyyy',$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE))&#xA;else&#xA;$Start/root/pfx3:CreditCardReturnRequest/CardMetadata/CardExpiration/Year"/>
                </year>
            </Date>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>621</pd:x>
        <pd:y>750</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Generate Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>474</pd:x>
        <pd:y>648</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx71:ActivityInput/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate-Error-1">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>683</pd:x>
        <pd:y>647</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx71:ActivityInput/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate-Error-2">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>754</pd:x>
        <pd:y>158</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx71:ActivityInput/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenMktHash">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>760</pd:x>
        <pd:y>279</pd:y>
        <config>
            <processName>/CommonProcesses/CryptoProcesses/GetWSIMatchingToken.process</processName>
            <processNameXPath/>
        </config>
        <pd:inputBindings>
            <root>
                <PAN>
                    <xsl:value-of select="$Start/root/PAN"/>
                </PAN>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenMktHash-1">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>681</pd:x>
        <pd:y>539</pd:y>
        <config>
            <processName>/CommonProcesses/CryptoProcesses/GetWSIMatchingToken.process</processName>
            <processNameXPath/>
        </config>
        <pd:inputBindings>
            <root>
                <PAN>
                    <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/root/PAN"/>
                </PAN>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetCLEParams">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>224</pd:x>
        <pd:y>256</pd:y>
        <config>
            <variableConfig>/BusinessProcesses/CreditReturn/CLEParams.jobsharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetLocalToken">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>472</pd:x>
        <pd:y>537</pd:y>
        <config>
            <processName>/CommonProcesses/CryptoProcesses/GetLocalToken.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <PAN>
                    <xsl:value-of select="$Start/root/PAN"/>
                </PAN>
                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($Start/root/pfx3:CreditCardReturnRequest/CardMetadata/CardExpiration/Month)>0">
                    <xsl:if test="$Start/root/pfx3:CreditCardReturnRequest/CardMetadata/CardExpiration/Month">
                        <ExpiryMonth>
                            <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/CardMetadata/CardExpiration/Month"/>
                        </ExpiryMonth>
                    </xsl:if>
                </xsl:if>
                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($Start/root/pfx3:CreditCardReturnRequest/CardMetadata/CardExpiration/Year)>0">
                    <ExpiryYear>
                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/CardMetadata/CardExpiration/Year"/>
                    </ExpiryYear>
                </xsl:if>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogRequestValidationExceptionRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1110</pd:x>
        <pd:y>743</pd:y>
        <config>
            <processName>/CommonProcesses/CLEClientStub/SendExceptionRequest.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns12:ExceptionHandlerRequest>
                <ns12:envCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/ENV"/>
                </ns12:envCode>
                <ns12:appCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CLE/AppCode"/>
                </ns12:appCode>
                <ns12:interfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </ns12:interfaceCode>
                <ns12:hostName>
                    <xsl:value-of select="BW:getHostName()"/>
                </ns12:hostName>
                <ns12:timeStamp>
                    <xsl:value-of select="current-dateTime()"/>
                </ns12:timeStamp>
                <ns12:message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </ns12:message>
                <ns12:payload>
                    <xsl:value-of select="tib:render-xml($Start/root/pfx3:CreditCardReturnRequest)"/>
                </ns12:payload>
                <ns12:ErrorLevel>
                    <ns12:errorCode>
                        <xsl:value-of select="concat($MapErrorResponse/pfx3:CreditCardReturnResponse/Error/Type, $_globalVariables/ns:GlobalVariables/PaymentService/Constants/ErrorCodeSeparator,&#xA;$MapErrorResponse/pfx3:CreditCardReturnResponse/Error/Detail[1])"/>
                    </ns12:errorCode>
                </ns12:ErrorLevel>
                <ns12:TransactionDetails>
                    <ns12:transactionDomain>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                    </ns12:transactionDomain>
                    <ns12:transactionType>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/CLE/TransactionType"/>
                    </ns12:transactionType>
                    <ns12:transactionID>
                        <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                    </ns12:transactionID>
                </ns12:TransactionDetails>
                <xsl:for-each select="$_error/ns1:ErrorReport">
                    <ns12:ErrorReportType>
                        <ns12:stackTrace>
                            <xsl:value-of select="StackTrace"/>
                        </ns12:stackTrace>
                        <ns12:msg>
                            <xsl:value-of select="Msg"/>
                        </ns12:msg>
                        <ns12:fullClass>
                            <xsl:value-of select="FullClass"/>
                        </ns12:fullClass>
                        <ns12:class>
                            <xsl:value-of select="Class"/>
                        </ns12:class>
                        <ns12:processStack>
                            <xsl:value-of select="ProcessStack"/>
                        </ns12:processStack>
                        <xsl:if test="MsgCode">
                            <ns12:msgCode>
                                <xsl:value-of select="MsgCode"/>
                            </ns12:msgCode>
                        </xsl:if>
                        <ns12:data>
                            <xsl:value-of select="Data/*"/>
                        </ns12:data>
                    </ns12:ErrorReportType>
                </xsl:for-each>
            </ns12:ExceptionHandlerRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapErrorResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>877</pd:x>
        <pd:y>749</pd:y>
        <config>
            <element ref="pfx3:CreditCardReturnResponse"/>
        </config>
        <pd:inputBindings>
            <pfx3:CreditCardReturnResponse>
                <xsl:attribute xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="version">
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/MessageVersion"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                    </SourceSystemIdentifier>
                    <xsl:choose xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                        <xsl:when test="string-length($Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId) > 0">
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,$Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId)"/>
                            </TransactionId>
                        </xsl:when>
                        <xsl:otherwise>
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV,BW:getHostName())"/>
                            </TransactionId>
                        </xsl:otherwise>
                    </xsl:choose>
                    <TransactionTime>
                        <xsl:value-of select="current-dateTime()"/>
                    </TransactionTime>
                </SystemContext>
                <xsl:copy-of select="$Start/root/pfx3:CreditCardReturnRequest/PaymentContext"/>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$_error/ns1:ErrorReport">
                    <xsl:choose>
                        <xsl:when test="$_error/ns1:ErrorReport/Class=$_globalVariables/ns:GlobalVariables/PaymentService/ValidationConstants/BIND_EXCEPTION_CLASS">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Detail"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:when test="string-length($GenMktHash/root/Error/Type)">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$GenMktHash/root/Error/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$GenMktHash/root/Error/Detail[1]"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$GenMktHash/root/Error/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:when test="string-length($GetLocalToken/root/Error/Type)">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$GetLocalToken/root/Error/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$GetLocalToken/root/Error/Detail[1]"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$GetLocalToken/root/Error/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:when test="string-length($GenMktHash-1/root/Error/Type)">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$GenMktHash-1/root/Error/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$GenMktHash-1/root/Error/Detail[1]"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$GenMktHash-1/root/Error/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:otherwise>
                            <Error>
                                <Type>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Detail"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
            </pfx3:CreditCardReturnResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapPaymentServiceResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>910</pd:x>
        <pd:y>190</pd:y>
        <config>
            <element ref="pfx3:CreditCardReturnResponse"/>
        </config>
        <pd:inputBindings>
            <pfx3:CreditCardReturnResponse>
                <xsl:attribute name="version">
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/MessageVersion"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                    </SourceSystemIdentifier>
                    <xsl:choose>
                        <xsl:when test="string-length($Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId)>0">
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,$Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId)"/>
                            </TransactionId>
                        </xsl:when>
                        <xsl:otherwise>
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV,BW:getHostName())"/>
                            </TransactionId>
                        </xsl:otherwise>
                    </xsl:choose>
                    <TransactionTime>
                        <xsl:value-of select="current-dateTime()"/>
                    </TransactionTime>
                </SystemContext>
                <xsl:copy-of select="$Start/root/pfx3:CreditCardReturnRequest/PaymentContext"/>
                <xsl:choose>
                    <xsl:when test="$ProcessPaymentGatewayResponse/root/Success=&quot;false&quot;">
                        <xsl:for-each select="$ProcessPaymentGatewayResponse/root/Error">
                            <Error>
                                <Type>
                                    <xsl:value-of select="Type"/>
                                </Type>
                                <xsl:for-each select="Detail">
                                    <Detail>
                                        <xsl:value-of select="."/>
                                    </Detail>
                                </xsl:for-each>
                                <ErrorMessage>
                                    <xsl:value-of select="ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/OrderContext">
                            <OrderContext>
                                <xsl:attribute name="omsOrderId">
                                    <xsl:value-of select="@omsOrderId"/>
                                </xsl:attribute>
                                <OrderTime>
                                    <xsl:value-of select="OrderTime"/>
                                </OrderTime>
                            </OrderContext>
                        </xsl:for-each>
                        <xsl:variable name="ctroutd" select="if(string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_CTROUTD) >0) &#xA; then&#xA; $ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_CTROUTD&#xA; else&#xA;  if(string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CTROUTD) >0) &#xA;    then&#xA;      $ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CTROUTD&#xA;   else&#xA;   ''"/>
                        <ConsumerTransactionId>
                            <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/ConsumerTransactionId"/>
                        </ConsumerTransactionId>
                        <ConfirmationId>
                            <xsl:value-of select="$ctroutd"/>
                        </ConfirmationId>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_DATETIME) > 0&#xA; or &#xA;string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_DATETIME) > 0">
                            <xsl:variable name="transDateTime" select="if(string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_DATETIME)>0)&#xA; then&#xA;$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_DATETIME&#xA; else&#xA;$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_DATETIME"/>
                            <TransactionMetadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/TRANSACTION_DATE_TIME"/>
                                </xsl:attribute>
                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns:GlobalVariables/Return/PaymentGateway/CCTimeFormat, $transDateTime)"/>
                            </TransactionMetadata>
                        </xsl:if>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESPONSE_TEXT)>0">
                            <TransactionMetadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/RESPONSE_TXT"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESPONSE_TEXT"/>
                            </TransactionMetadata>
                        </xsl:if>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ACCOUNT)>0">
                            <TransactionMetadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CLIENTID"/>
                                </xsl:attribute>
                                <xsl:value-of select="concat($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ACCOUNT,$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/SITE,$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TERM)"/>
                            </TransactionMetadata>
                        </xsl:if>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INVOICE)>0">
                            <TransactionMetadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/INVOICE"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INVOICE"/>
                            </TransactionMetadata>
                        </xsl:if>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_SEQ_NUM)>0">
                            <TransactionMetadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/TRANSACTION_SEQ_NUM"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_SEQ_NUM"/>
                            </TransactionMetadata>
                        </xsl:if>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INTRN_SEQ_NUM)>0">
                            <TransactionMetadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/INTERNAL_SEQ_NUM"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INTRN_SEQ_NUM"/>
                            </TransactionMetadata>
                        </xsl:if>
                        <xsl:if test="string-length($ctroutd)>0">
                            <TransactionMetadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CTROUTD"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ctroutd"/>
                            </TransactionMetadata>
                        </xsl:if>
                        <FinancialDate>
                            <xsl:value-of select="$FinancialDate/root/FinancialDate"/>
                        </FinancialDate>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_PAYMENT)>0">
                            <Tender>
                                <xsl:variable name="expiryDate" select="if (string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE)>0)&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/PaymentGateway/VERIFONE/PaymentTokenExpirationDateFormat,concat($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE ,&quot; &quot;,$_globalVariables/ns:GlobalVariables/PaymentService/PaymentGateway/VERIFONE/PaymentTokenExpirationTimeConstant))&#xA;else&#xA;tib:add-to-dateTime(tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenCalculatedExpirationTImeFormat,$CalculateLastDateOfMonth/root/lastDate),0, 0, $_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenExpirationPeriod, 0, 0,0)"/>
                                <Type>
                                    <Code>
                                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/Tender/Type/Code"/>
                                    </Code>
                                    <xsl:if test="string-length($Start/root/TenderSubCode) > 0">
                                        <xsl:if test="$Start/root/TenderSubCode">
                                            <SubCode>
                                                <xsl:value-of select="$Start/root/TenderSubCode"/>
                                            </SubCode>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PPCV)>0">
                                        <Tag>
                                            <xsl:variable name="var" select="substring-before($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PPCV,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/PPCVValueSeperator)"/>
                                            <xsl:attribute name="type">
                                                <xsl:value-of select="$GetPaymentServicePPCVTypeValues/ns6:PaymentServicePPCVTypeValues/ns6:PaymentServicePPCVTypeValue[ns6:PPCVTypeValue=$var]/ns6:PPCVTagValue"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PPCV"/>
                                        </Tag>
                                    </xsl:if>
                                </Type>
                                <xsl:choose>
                                    <xsl:when test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_PAYMENT)>0">
                                        <Token>
                                            <xsl:attribute name="scheme">
                                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentGatewayTokenScheme,$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/EnvId)"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="isTemporary">
                                                <xsl:value-of select="false()"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="scope">
                                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenScope"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="expiration">
                                                <xsl:value-of select="$expiryDate"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_PAYMENT"/>
                                        </Token>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <Token>
                                            <xsl:attribute name="scheme">
                                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentGatewayTokenScheme,$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/EnvId)"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="isTemporary">
                                                <xsl:value-of select="false()"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="scope">
                                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenScope"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="expiration">
                                                <xsl:value-of select="$expiryDate"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="''"/>
                                        </Token>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_MATCHING)>0">
                                    <Hash>
                                        <xsl:attribute name="scheme">
                                            <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/MatchingTokenScheme,$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/EnvId)"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_MATCHING"/>
                                    </Hash>
                                </xsl:if>
                                <xsl:if test="string-length($GenMktHash/root/TokenDetails/WSIMatchingTokenValue)>0">
                                    <Hash>
                                        <xsl:attribute name="scheme">
                                            <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenScheme"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenValue"/>
                                    </Hash>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM)>0">
                                        <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM"/>
                                            </MaskedAccountNumber>
                                        </xsl:if>
                                    </xsl:when>
                                    <xsl:when test="string-length($Start/root/PAN)>0">
                                        <MaskedAccountNumber>
                                            <xsl:value-of select="concat( tib:pad-and-limit(tib:left($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayFirst),(string-length($Start/root/PAN)-$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast),$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountMaskCharecter), tib:right($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast))"/>
                                        </MaskedAccountNumber>
                                    </xsl:when>
                                    <xsl:otherwise/>
                                </xsl:choose>
                            </Tender>
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>
            </pfx3:CreditCardReturnResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null-2">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>230</pd:x>
        <pd:y>704</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Null-3">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>330</pd:x>
        <pd:y>468</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ProcessPaymentGatewayResponse">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>397</pd:x>
        <pd:y>114</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/ProcessPaymentGatewayResponse-CC.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <InterfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </InterfaceCode>
                <OperationScope>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/BWTransformation/OperationScope"/>
                </OperationScope>
                <TransactionType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/CLE/TransactionType"/>
                </TransactionType>
                <TransactionId>
                    <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                </TransactionId>
                <ns5:UGPRESPONSE>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/@RSA">
                        <xsl:attribute name="RSA">
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/@RSA"/>
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/@RSV">
                        <xsl:attribute name="RSV">
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/@RSV"/>
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ACCOUNT">
                        <ACCOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ACCOUNT"/>
                        </ACCOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/SITE">
                        <SITE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/SITE"/>
                        </SITE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TERM">
                        <TERM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TERM"/>
                        </TERM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/COMMAND">
                        <COMMAND>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/COMMAND"/>
                        </COMMAND>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESULT_CODE">
                        <RESULT_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESULT_CODE"/>
                        </RESULT_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESPONSE_TEXT">
                        <RESPONSE_TEXT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESPONSE_TEXT"/>
                        </RESPONSE_TEXT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESULT">
                        <RESULT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESULT"/>
                        </RESULT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ACCT_NUM">
                        <ACCT_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ACCT_NUM"/>
                        </ACCT_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRACE_CODE">
                        <TRACE_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRACE_CODE"/>
                        </TRACE_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AUTH_CODE">
                        <AUTH_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AUTH_CODE"/>
                        </AUTH_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PAYMENT_MEDIA">
                        <PAYMENT_MEDIA>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PAYMENT_MEDIA"/>
                        </PAYMENT_MEDIA>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PAYMENT_TYPE">
                        <PAYMENT_TYPE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PAYMENT_TYPE"/>
                        </PAYMENT_TYPE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AVS_CODE">
                        <AVS_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AVS_CODE"/>
                        </AVS_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CVV2_CODE">
                        <CVV2_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CVV2_CODE"/>
                        </CVV2_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CMRCL_FLAG">
                        <CMRCL_FLAG>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CMRCL_FLAG"/>
                        </CMRCL_FLAG>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/BATCH_NUM">
                        <BATCH_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/BATCH_NUM"/>
                        </BATCH_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CTROUTD">
                        <CTROUTD>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/CTROUTD"/>
                        </CTROUTD>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TA_TOKEN">
                        <TA_TOKEN>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TA_TOKEN"/>
                        </TA_TOKEN>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AVAIL_BALANCE">
                        <AVAIL_BALANCE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AVAIL_BALANCE"/>
                        </AVAIL_BALANCE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_AMOUNT">
                        <TRANS_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_AMOUNT"/>
                        </TRANS_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_DATETIME">
                        <TRANS_DATETIME>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_DATETIME"/>
                        </TRANS_DATETIME>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PPCV">
                        <PPCV>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PPCV"/>
                        </PPCV>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AUTH_AMOUNT">
                        <AUTH_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AUTH_AMOUNT"/>
                        </AUTH_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AVAIL_AMOUNT">
                        <AVAIL_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AVAIL_AMOUNT"/>
                        </AVAIL_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ORIG_TRANS_AMOUNT">
                        <ORIG_TRANS_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/ORIG_TRANS_AMOUNT"/>
                        </ORIG_TRANS_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DIFF_AMOUNT_DUE">
                        <DIFF_AMOUNT_DUE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DIFF_AMOUNT_DUE"/>
                        </DIFF_AMOUNT_DUE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INTRN_SEQ_NUM">
                        <INTRN_SEQ_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INTRN_SEQ_NUM"/>
                        </INTRN_SEQ_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INVOICE">
                        <INVOICE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/INVOICE"/>
                        </INVOICE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PY_RESP_CODE">
                        <PY_RESP_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/PY_RESP_CODE"/>
                        </PY_RESP_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/REFERENCE">
                        <REFERENCE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/REFERENCE"/>
                        </REFERENCE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESPONSE_CODE">
                        <RESPONSE_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/RESPONSE_CODE"/>
                        </RESPONSE_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TERMINATION_STATUS">
                        <TERMINATION_STATUS>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TERMINATION_STATUS"/>
                        </TERMINATION_STATUS>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_SEQ_NUM">
                        <TRANS_SEQ_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_SEQ_NUM"/>
                        </TRANS_SEQ_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TROUTD">
                        <TROUTD>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TROUTD"/>
                        </TROUTD>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AUTH_RESP_CODE">
                        <AUTH_RESP_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/AUTH_RESP_CODE"/>
                        </AUTH_RESP_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM">
                        <DUP_ACCT_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_ACCT_NUM"/>
                        </DUP_ACCT_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_AUTH_CODE">
                        <DUP_AUTH_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_AUTH_CODE"/>
                        </DUP_AUTH_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_AVS_CODE">
                        <DUP_AVS_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_AVS_CODE"/>
                        </DUP_AVS_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_CVV2_CODE">
                        <DUP_CVV2_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_CVV2_CODE"/>
                        </DUP_CVV2_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_CTROUTD">
                        <DUP_CTROUTD>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_CTROUTD"/>
                        </DUP_CTROUTD>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_INVOICE">
                        <DUP_INVOICE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_INVOICE"/>
                        </DUP_INVOICE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_PAYMENT_MEDIA">
                        <DUP_PAYMENT_MEDIA>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_PAYMENT_MEDIA"/>
                        </DUP_PAYMENT_MEDIA>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_AMOUNT">
                        <DUP_TRANS_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_AMOUNT"/>
                        </DUP_TRANS_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_DATETIME">
                        <DUP_TRANS_DATETIME>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_DATETIME"/>
                        </DUP_TRANS_DATETIME>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TROUTD">
                        <DUP_TROUTD>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TROUTD"/>
                        </DUP_TROUTD>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/STATUS_CODE">
                        <STATUS_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/STATUS_CODE"/>
                        </STATUS_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/BATCH_TRACE_ID">
                        <BATCH_TRACE_ID>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/BATCH_TRACE_ID"/>
                        </BATCH_TRACE_ID>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_PROCESS">
                        <TKN_PROCESS>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_PROCESS"/>
                        </TKN_PROCESS>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_USED">
                        <TKN_USED>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_USED"/>
                        </TKN_USED>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_MATCHING">
                        <TKN_MATCHING>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_MATCHING"/>
                        </TKN_MATCHING>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_PAYMENT">
                        <TKN_PAYMENT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_PAYMENT"/>
                        </TKN_PAYMENT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE">
                        <TKN_EXPDATE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TKN_EXPDATE"/>
                        </TKN_EXPDATE>
                    </xsl:if>
                </ns5:UGPRESPONSE>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SendReconciliationMessage">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>403</pd:x>
        <pd:y>405</pd:y>
        <config>
            <processName>/BusinessProcesses/Reconciliation/Credit/SendCreditReconciliationMessage.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <ns9:CreditReconciliationRequest>
                    <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/SystemContext">
                        <ns9:SystemContext>
                            <EnvironmentIdentifier>
                                <xsl:value-of select="EnvironmentIdentifier"/>
                            </EnvironmentIdentifier>
                            <RegionIdentifier>
                                <xsl:value-of select="RegionIdentifier"/>
                            </RegionIdentifier>
                            <SourceSystemIdentifier>
                                <xsl:value-of select="SourceSystemIdentifier"/>
                            </SourceSystemIdentifier>
                            <TransactionId>
                                <xsl:value-of select="TransactionId"/>
                            </TransactionId>
                            <TransactionTime>
                                <xsl:value-of select="TransactionTime"/>
                            </TransactionTime>
                            <xsl:if test="RoutingSpecification">
                                <RoutingSpecification>
                                    <xsl:value-of select="RoutingSpecification"/>
                                </RoutingSpecification>
                            </xsl:if>
                            <xsl:if test="TestingMode">
                                <TestingMode>
                                    <xsl:value-of select="TestingMode"/>
                                </TestingMode>
                            </xsl:if>
                        </ns9:SystemContext>
                    </xsl:for-each>
                    <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/PaymentContext">
                        <ns9:PaymentContext>
                            <Concept>
                                <xsl:value-of select="Concept"/>
                            </Concept>
                            <Channel>
                                <xsl:value-of select="Channel"/>
                            </Channel>
                            <xsl:choose>
                                <xsl:when test="string-length(Store)>0">
                                    <xsl:for-each select="Store">
                                        <Store>
                                            <xsl:if test="StoreId">
                                                <StoreId>
                                                    <xsl:value-of select="StoreId"/>
                                                </StoreId>
                                            </xsl:if>
                                            <RegisterId>
                                                <xsl:value-of select="RegisterId"/>
                                            </RegisterId>
                                            <xsl:if test="PaymentTerminalId">
                                                <PaymentTerminalId>
                                                    <xsl:value-of select="PaymentTerminalId"/>
                                                </PaymentTerminalId>
                                            </xsl:if>
                                            <RegisterTransactionId>
                                                <xsl:value-of select="RegisterTransactionId"/>
                                            </RegisterTransactionId>
                                            <xsl:if test="UserId">
                                                <UserId>
                                                    <xsl:value-of select="UserId"/>
                                                </UserId>
                                            </xsl:if>
                                            <xsl:if test="PosUserId">
                                                <PosUserId>
                                                    <xsl:value-of select="PosUserId"/>
                                                </PosUserId>
                                            </xsl:if>
                                            <xsl:if test="AssociateId">
                                                <AssociateId>
                                                    <xsl:value-of select="AssociateId"/>
                                                </AssociateId>
                                            </xsl:if>
                                        </Store>
                                    </xsl:for-each>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:for-each select="CareCenter">
                                        <CareCenter>
                                            <xsl:if test="UserId">
                                                <UserId>
                                                    <xsl:value-of select="UserId"/>
                                                </UserId>
                                            </xsl:if>
                                            <xsl:if test="AssociateId">
                                                <AssociateId>
                                                    <xsl:value-of select="AssociateId"/>
                                                </AssociateId>
                                            </xsl:if>
                                        </CareCenter>
                                    </xsl:for-each>
                                </xsl:otherwise>
                            </xsl:choose>
                        </ns9:PaymentContext>
                    </xsl:for-each>
                    <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/OrderContext">
                        <ns9:OrderContext>
                            <xsl:attribute name="omsOrderId">
                                <xsl:value-of select="@omsOrderId"/>
                            </xsl:attribute>
                            <OrderTime>
                                <xsl:value-of select="OrderTime"/>
                            </OrderTime>
                        </ns9:OrderContext>
                    </xsl:for-each>
                    <ns9:TransactionType>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix"/>
                    </ns9:TransactionType>
                    <ns9:TransactionDateTime>
                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionTime"/>
                    </ns9:TransactionDateTime>
                    <ns9:ConsumerTransactionId>
                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/ConsumerTransactionId"/>
                    </ns9:ConsumerTransactionId>
                    <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/Tender">
                        <ns9:Tender>
                            <xsl:for-each select="Type">
                                <Type>
                                    <Code>
                                        <xsl:value-of select="Code"/>
                                    </Code>
                                    <xsl:if test="SubCode">
                                        <SubCode>
                                            <xsl:value-of select="SubCode"/>
                                        </SubCode>
                                    </xsl:if>
                                    <xsl:for-each select="Tag">
                                        <Tag>
                                            <xsl:attribute name="type">
                                                <xsl:value-of select="@type"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="."/>
                                        </Tag>
                                    </xsl:for-each>
                                </Type>
                            </xsl:for-each>
                            <xsl:choose>
                                <xsl:when test="string-length(AccountNumber)>0">
                                    <AccountNumber>
                                        <xsl:value-of select="AccountNumber"/>
                                    </AccountNumber>
                                </xsl:when>
                                <xsl:otherwise>
                                    <Token>
                                        <xsl:attribute name="scheme">
                                            <xsl:value-of select="Token/@scheme"/>
                                        </xsl:attribute>
                                        <xsl:if test="Token/@scope">
                                            <xsl:attribute name="scope">
                                                <xsl:value-of select="Token/@scope"/>
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:if test="Token/@isTemporary">
                                            <xsl:attribute name="isTemporary">
                                                <xsl:value-of select="Token/@isTemporary"/>
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:attribute name="expiration">
                                            <xsl:value-of select="Token/@expiration"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="Token"/>
                                    </Token>
                                </xsl:otherwise>
                            </xsl:choose>
                        </ns9:Tender>
                    </xsl:for-each>
                    <ns9:CurrencyCode>
                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/CurrencyCode"/>
                    </ns9:CurrencyCode>
                    <ns9:TransactionAmount>
                        <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/ReturnAmount"/>
                    </ns9:TransactionAmount>
                    <xsl:if test="$Start/root/pfx3:CreditCardReturnRequest/PaymentPlanCode">
                        <ns9:PaymentPlanCode>
                            <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/PaymentPlanCode"/>
                        </ns9:PaymentPlanCode>
                    </xsl:if>
                    <ns9:FinancialDate>
                        <xsl:value-of select="$FinancialDate/root/FinancialDate"/>
                    </ns9:FinancialDate>
                </ns9:CreditReconciliationRequest>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ValidatePaymentGatewayResponse">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>224</pd:x>
        <pd:y>35</pd:y>
        <config>
            <processName>/BusinessProcesses/CreditReturn/ResponseProcessors/ValidatePaymentGatewayResponse-CC.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <paymentgatewayresponse>
                    <xsl:value-of select="$Start/root/paymentgatewayresponse"/>
                </paymentgatewayresponse>
                <transactionid>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionId"/>
                </transactionid>
                <xsl:copy-of select="$Start/root/pfx3:CreditCardReturnRequest"/>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetPaymentServicePPCVTypeValues">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>909</pd:x>
        <pd:y>288</pd:y>
        <config>
            <variableConfig>/SharedResources/SharedVariables/SV-PaymentServicePPCVTypeValues.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="AssignFinancialDate">
        <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
        <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
        <pd:x>400</pd:x>
        <pd:y>239</pd:y>
        <config>
            <variableName>FinancialDate</variableName>
        </config>
        <pd:inputBindings>
            <xsl:variable name="transactionTime" select="if(string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_DATETIME)>0)&#xA;&#x9; then tib:parse-dateTime($_globalVariables/ns:GlobalVariables/Return/PaymentGateway/CCTimeFormat, $ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/TRANS_DATETIME)&#xA;&#xA; else if (string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_DATETIME)>0)&#xA;&#x9;then tib:parse-dateTime($_globalVariables/ns:GlobalVariables/Return/PaymentGateway/CCTimeFormat, $ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE/DUP_TRANS_DATETIME)&#xA;else $Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionTime"/>
            <xsl:variable name="cutOffTime" select="tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DTC/DateTimeFormat, concat(tib:format-date($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateFormat, current-date()),&quot;T&quot;,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/CutOffTime/CC))"/>
            <root>
                <FinancialDate>
                    <xsl:value-of select="if(tib:compare-dateTime($transactionTime, $cutOffTime)=1)&#xA;then tib:add-to-date(tib:format-date($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateFormat, current-date()), 0, 0, 1)&#xA;else tib:format-date($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateFormat, current-date())"/>
                </FinancialDate>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>715</pd:x>
        <pd:y>410</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="RenderReconciliationMessage">
        <pd:type>com.tibco.plugin.xml.XMLRendererActivity</pd:type>
        <pd:resourceType>ae.activities.XMLRendererActivity</pd:resourceType>
        <pd:x>482</pd:x>
        <pd:y>314</pd:y>
        <config>
            <renderAsText>text</renderAsText>
            <validateInput>false</validateInput>
            <term ref="ns9:CreditReconciliationRequest"/>
        </config>
        <pd:inputBindings>
            <ns9:CreditReconciliationRequest>
                <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/SystemContext">
                    <ns9:SystemContext>
                        <EnvironmentIdentifier>
                            <xsl:value-of select="EnvironmentIdentifier"/>
                        </EnvironmentIdentifier>
                        <RegionIdentifier>
                            <xsl:value-of select="RegionIdentifier"/>
                        </RegionIdentifier>
                        <SourceSystemIdentifier>
                            <xsl:value-of select="SourceSystemIdentifier"/>
                        </SourceSystemIdentifier>
                        <TransactionId>
                            <xsl:value-of select="TransactionId"/>
                        </TransactionId>
                        <TransactionTime>
                            <xsl:value-of select="TransactionTime"/>
                        </TransactionTime>
                        <xsl:if test="RoutingSpecification">
                            <RoutingSpecification>
                                <xsl:value-of select="RoutingSpecification"/>
                            </RoutingSpecification>
                        </xsl:if>
                        <xsl:if test="TestingMode">
                            <TestingMode>
                                <xsl:value-of select="TestingMode"/>
                            </TestingMode>
                        </xsl:if>
                    </ns9:SystemContext>
                </xsl:for-each>
                <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/PaymentContext">
                    <ns9:PaymentContext>
                        <Concept>
                            <xsl:value-of select="Concept"/>
                        </Concept>
                        <Channel>
                            <xsl:value-of select="Channel"/>
                        </Channel>
                        <xsl:choose>
                            <xsl:when test="string-length(Store)>0">
                                <xsl:for-each select="Store">
                                    <Store>
                                        <xsl:if test="StoreId">
                                            <StoreId>
                                                <xsl:value-of select="StoreId"/>
                                            </StoreId>
                                        </xsl:if>
                                        <RegisterId>
                                            <xsl:value-of select="RegisterId"/>
                                        </RegisterId>
                                        <xsl:if test="PaymentTerminalId">
                                            <PaymentTerminalId>
                                                <xsl:value-of select="PaymentTerminalId"/>
                                            </PaymentTerminalId>
                                        </xsl:if>
                                        <RegisterTransactionId>
                                            <xsl:value-of select="RegisterTransactionId"/>
                                        </RegisterTransactionId>
                                        <xsl:if test="UserId">
                                            <UserId>
                                                <xsl:value-of select="UserId"/>
                                            </UserId>
                                        </xsl:if>
                                        <xsl:if test="PosUserId">
                                            <PosUserId>
                                                <xsl:value-of select="PosUserId"/>
                                            </PosUserId>
                                        </xsl:if>
                                        <xsl:if test="AssociateId">
                                            <AssociateId>
                                                <xsl:value-of select="AssociateId"/>
                                            </AssociateId>
                                        </xsl:if>
                                    </Store>
                                </xsl:for-each>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:for-each select="CareCenter">
                                    <CareCenter>
                                        <xsl:if test="UserId">
                                            <UserId>
                                                <xsl:value-of select="UserId"/>
                                            </UserId>
                                        </xsl:if>
                                        <xsl:if test="AssociateId">
                                            <AssociateId>
                                                <xsl:value-of select="AssociateId"/>
                                            </AssociateId>
                                        </xsl:if>
                                    </CareCenter>
                                </xsl:for-each>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns9:PaymentContext>
                </xsl:for-each>
                <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/OrderContext">
                    <ns9:OrderContext>
                        <xsl:attribute name="omsOrderId">
                            <xsl:value-of select="@omsOrderId"/>
                        </xsl:attribute>
                        <OrderTime>
                            <xsl:value-of select="OrderTime"/>
                        </OrderTime>
                    </ns9:OrderContext>
                </xsl:for-each>
                <ns9:TransactionType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/Constants/TransactionIdPrefix"/>
                </ns9:TransactionType>
                <ns9:TransactionDateTime>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/SystemContext/TransactionTime"/>
                </ns9:TransactionDateTime>
                <ns9:ConsumerTransactionId>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/ConsumerTransactionId"/>
                </ns9:ConsumerTransactionId>
                <xsl:for-each select="$Start/root/pfx3:CreditCardReturnRequest/Tender">
                    <ns9:Tender>
                        <xsl:for-each select="Type">
                            <Type>
                                <Code>
                                    <xsl:value-of select="Code"/>
                                </Code>
                                <xsl:if test="SubCode">
                                    <SubCode>
                                        <xsl:value-of select="SubCode"/>
                                    </SubCode>
                                </xsl:if>
                                <xsl:for-each select="Tag">
                                    <Tag>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="@type"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="."/>
                                    </Tag>
                                </xsl:for-each>
                            </Type>
                        </xsl:for-each>
                        <xsl:choose>
                            <xsl:when test="string-length(AccountNumber)>0">
                                <AccountNumber>
                                    <xsl:value-of select="AccountNumber"/>
                                </AccountNumber>
                            </xsl:when>
                            <xsl:otherwise>
                                <Token>
                                    <xsl:attribute name="scheme">
                                        <xsl:value-of select="Token/@scheme"/>
                                    </xsl:attribute>
                                    <xsl:if test="Token/@scope">
                                        <xsl:attribute name="scope">
                                            <xsl:value-of select="Token/@scope"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:if test="Token/@isTemporary">
                                        <xsl:attribute name="isTemporary">
                                            <xsl:value-of select="Token/@isTemporary"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:attribute name="expiration">
                                        <xsl:value-of select="Token/@expiration"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="Token"/>
                                </Token>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns9:Tender>
                </xsl:for-each>
                <ns9:CurrencyCode>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/CurrencyCode"/>
                </ns9:CurrencyCode>
                <ns9:TransactionAmount>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardReturnRequest/ReturnAmount"/>
                </ns9:TransactionAmount>
                <ns9:FinancialDate>
                    <xsl:value-of select="$FinancialDate/root/FinancialDate"/>
                </ns9:FinancialDate>
            </ns9:CreditReconciliationRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogSendReconciliationExceptionRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>609</pd:x>
        <pd:y>314</pd:y>
        <config>
            <processName>/CommonProcesses/CLEClientStub/SendExceptionRequest.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns12:ExceptionHandlerRequest>
                <ns12:envCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/ENV"/>
                </ns12:envCode>
                <ns12:appCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CLE/AppCode"/>
                </ns12:appCode>
                <ns12:interfaceCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Reconciliation/Credit/CLE/InterfaceCode"/>
                </ns12:interfaceCode>
                <ns12:hostName>
                    <xsl:value-of select="BW:getHostName()"/>
                </ns12:hostName>
                <ns12:timeStamp>
                    <xsl:value-of select="current-dateTime()"/>
                </ns12:timeStamp>
                <ns12:message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </ns12:message>
                <ns12:payload>
                    <xsl:value-of select="$RenderReconciliationMessage/xmlString"/>
                </ns12:payload>
                <ns12:ErrorLevel>
                    <ns12:errorCode>
                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Type, $_globalVariables/ns:GlobalVariables/PaymentService/Constants/ErrorCodeSeparator,&#xA;$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Detail)"/>
                    </ns12:errorCode>
                </ns12:ErrorLevel>
                <ns12:TransactionDetails>
                    <ns12:transactionDomain>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                    </ns12:transactionDomain>
                    <ns12:transactionType>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/CLE/TransactionType"/>
                    </ns12:transactionType>
                    <ns12:transactionID>
                        <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                    </ns12:transactionID>
                </ns12:TransactionDetails>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$_error/ns1:ErrorReport">
                    <ns12:ErrorReportType>
                        <ns12:stackTrace>
                            <xsl:value-of select="StackTrace"/>
                        </ns12:stackTrace>
                        <ns12:msg>
                            <xsl:value-of select="Msg"/>
                        </ns12:msg>
                        <ns12:fullClass>
                            <xsl:value-of select="FullClass"/>
                        </ns12:fullClass>
                        <ns12:class>
                            <xsl:value-of select="Class"/>
                        </ns12:class>
                        <ns12:processStack>
                            <xsl:value-of select="ProcessStack"/>
                        </ns12:processStack>
                        <xsl:if test="MsgCode">
                            <ns12:msgCode>
                                <xsl:value-of select="MsgCode"/>
                            </ns12:msgCode>
                        </xsl:if>
                        <ns12:data>
                            <xsl:value-of select="Data/*"/>
                        </ns12:data>
                    </ns12:ErrorReportType>
                </xsl:for-each>
            </ns12:ExceptionHandlerRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="NotifySupport">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>496</pd:x>
        <pd:y>36</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/NotifySupport.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <InterfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </InterfaceCode>
                <ExceptionCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/NotificationErrorCodes/PAYMENT_GATEWAY_RESPONSE_VALIDATION_ERROR"/>
                </ExceptionCode>
                <ErrorMessage>
                    <xsl:value-of select="concat($ValidatePaymentGatewayResponse/root/pfx3:CreditCardReturnResponse/Error/Detail[1],  $_globalVariables/ns:GlobalVariables/PaymentService/CLE/ErrorMessageSeparator   ,  $ValidatePaymentGatewayResponse/root/pfx3:CreditCardReturnResponse/Error/ErrorMessage)"/>
                </ErrorMessage>
                <TransactionType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Return/CLE/TransactionType"/>
                </TransactionType>
                <TransactionId>
                    <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                </TransactionId>
                <Payload>
                    <xsl:value-of select="tib:render-xml($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE)"/>
                </Payload>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>GetCLEParams</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapPaymentServiceResponse</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidatePaymentGatewayResponse</pd:from>
        <pd:to>ProcessPaymentGatewayResponse</pd:to>
        <pd:xpathDescription>Valid Response?</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ValidatePaymentGatewayResponse/root/pfx8:UGPRESPONSE)&gt;0 and 
string-length( $ValidatePaymentGatewayResponse/root/pfx3:CreditCardReturnResponse ) = 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>MapErrorResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogRequestValidationExceptionRequest</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidatePaymentGatewayResponse</pd:from>
        <pd:to>NotifySupport</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetCLEParams</pd:from>
        <pd:to>ValidatePaymentGatewayResponse</pd:to>
        <pd:xpathDescription>OnGatewayCallSuccess</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/root/paymentgatewayresponse)&gt;0 and string-length($Start/root/Error/Type)=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>ProcessPaymentGatewayResponse</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ProcessPaymentGatewayResponse</pd:from>
        <pd:to>AssignFinancialDate</pd:to>
        <pd:xpathDescription>OnSuccess</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$ProcessPaymentGatewayResponse/root/Success=$_globalVariables/ns:GlobalVariables/PaymentService/Constants/BooleanSuccess</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetCLEParams</pd:from>
        <pd:to>Null-2</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CalculateLastDateOfMonth</pd:from>
        <pd:to>GetPaymentServicePPCVTypeValues</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ProcessPaymentGatewayResponse</pd:from>
        <pd:to>Null-3</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ProcessPaymentGatewayResponse/root/Error/Type) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-3</pd:from>
        <pd:to>GetLocalToken</pd:to>
        <pd:xpathDescription>Remote-Error with PAN</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/root/PAN)&gt;0
  and
$ProcessPaymentGatewayResponse/root/provideTokenOnError="true"</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-2</pd:from>
        <pd:to>GetLocalToken</pd:to>
        <pd:xpathDescription>PAN in Hand</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/root/PAN) &gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetLocalToken</pd:from>
        <pd:to>GenMktHash-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash-1</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-2</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-3</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash</pd:from>
        <pd:to>Generate-Error-2</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GenMktHash/root/Error/Type)&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetLocalToken</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GetLocalToken/root/Error/Type)&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash-1</pd:from>
        <pd:to>Generate-Error-1</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GenMktHash-1/root/Error/Type)&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash</pd:from>
        <pd:to>CalculateLastDateOfMonth</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapErrorResponse</pd:from>
        <pd:to>LogRequestValidationExceptionRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPaymentServicePPCVTypeValues</pd:from>
        <pd:to>MapPaymentServiceResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AssignFinancialDate</pd:from>
        <pd:to>SendReconciliationMessage</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SendReconciliationMessage</pd:from>
        <pd:to>Null</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>GenMktHash</pd:to>
        <pd:xpathDescription>PAN in Hand</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/root/PAN)&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>CalculateLastDateOfMonth</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SendReconciliationMessage</pd:from>
        <pd:to>RenderReconciliationMessage</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>RenderReconciliationMessage</pd:from>
        <pd:to>LogSendReconciliationExceptionRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogSendReconciliationExceptionRequest</pd:from>
        <pd:to>Null</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>NotifySupport</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>