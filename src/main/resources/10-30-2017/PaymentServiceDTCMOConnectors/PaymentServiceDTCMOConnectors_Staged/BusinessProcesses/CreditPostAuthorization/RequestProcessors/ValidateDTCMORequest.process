<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/IBMiAdapterConfiguration/OutboundMessage/Data_Structures/PublicationService" xmlns:ns="http://services.wsgc.com/2014/Payment" xmlns:ns12="http://www.ultimosoft.com/CLEH/ExceptionHandler.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns2="http://www.tibco.com/pe/EngineTypes" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pfx2="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/Tokenization/OutboundMessage/OutboundMessage" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx3="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/Tokenization/OutboundMessage/Data_Structures/TokenizationPublisher" xmlns:pfx4="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/PostAuthorization/OutboundMessage/Data_Structures/PostAuthorizationPublisher" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions">
    <xsd:import namespace="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/IBMiAdapterConfiguration/OutboundMessage/Data_Structures/PublicationService" schemaLocation="/AESchemas/ae/as400/IBMiAdapterConfiguration/OutboundMessage/Data_Structures/PublicationService.aeschema"/>
    <xsd:import namespace="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/Tokenization/OutboundMessage/OutboundMessage" schemaLocation="/AESchemas/ae/as400/Tokenization/OutboundMessage/OutboundMessage.aeschema"/>
    <xsd:import namespace="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/Tokenization/OutboundMessage/Data_Structures/TokenizationPublisher" schemaLocation="/AESchemas/ae/as400/Tokenization/OutboundMessage/Data_Structures/TokenizationPublisher.aeschema"/>
    <xsd:import namespace="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/as400/PostAuthorization/OutboundMessage/Data_Structures/PostAuthorizationPublisher" schemaLocation="/AESchemas/ae/as400/PostAuthorization/OutboundMessage/Data_Structures/PostAuthorizationPublisher.aeschema"/>
    <xsd:import namespace="http://services.wsgc.com/2014/Payment" schemaLocation="/SharedResources/XMLSchemas/2014/Payment/credit-post-authorization.xsd"/>
    <pd:name>BusinessProcesses/CreditPostAuthorization/RequestProcessors/ValidateDTCMORequest.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType ref="pfx4:Entry"/>
    <pd:startX>27</pd:startX>
    <pd:startY>35</pd:startY>
    <pd:returnBindings>
        <root>
            <xsl:choose>
                <xsl:when test="string-length($MapRequestValidationErrorResponse/ns:CreditCardPostAuthorizationResponse) >0">
                    <xsl:copy-of select="$MapRequestValidationErrorResponse/ns:CreditCardPostAuthorizationResponse"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:copy-of select="$ValidateXmlRequest/root/ns:CreditCardPostAuthorizationResponse"/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:copy-of select="$ValidateXmlRequest/root/ns:CreditCardPostAuthorizationRequest"/>
            <xsl:if test="$ValidateXmlRequest/root/TransactionId">
                <TransactionId>
                    <xsl:value-of select="$ValidateXmlRequest/root/TransactionId"/>
                </TransactionId>
            </xsl:if>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="ns:CreditCardPostAuthorizationResponse" minOccurs="0"/>
                    <xsd:element ref="ns:CreditCardPostAuthorizationRequest" minOccurs="0"/>
                    <xsd:element name="TransactionId" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>471</pd:endX>
    <pd:endY>35</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1428698665830</pd:targetNamespace>
    <pd:activity name="MapAdapterRequest">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>171</pd:x>
        <pd:y>36</pd:y>
        <config>
            <element ref="ns:CreditCardPostAuthorizationRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable name="Entry" select="$Start/pfx4:Entry"/>
            <ns:CreditCardPostAuthorizationRequest>
                <xsl:attribute name="version">
                    <xsl:value-of select="tib:trim($Entry/Version)"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="tib:trim($Entry/EnvironmentIdentifier)"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="tib:trim($Entry/RegionIdentifier)"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="tib:trim($Entry/SourceSystemIdentifier)"/>
                    </SourceSystemIdentifier>
                    <TransactionId>
                        <xsl:value-of select="tib:trim($Entry/TransactionId)"/>
                    </TransactionId>
                    <TransactionTime>
                        <xsl:value-of select="tib:trim($Entry/TransactionTime)"/>
                    </TransactionTime>
                </SystemContext>
                <PaymentContext>
                    <Concept>
                        <xsl:value-of select="tib:trim($Entry/Concept)"/>
                    </Concept>
                    <Channel>
                        <xsl:value-of select="tib:trim($Entry/Channel)"/>
                    </Channel>
                </PaymentContext>
                <OrderContext>
                    <xsl:attribute name="omsOrderId">
                        <xsl:value-of select="tib:trim($Entry/OrderNumber)"/>
                    </xsl:attribute>
                    <OrderTime>
                        <xsl:value-of select="tib:trim($Entry/CaptureTime)"/>
                    </OrderTime>
                </OrderContext>
                <ConsumerTransactionId>
                    <xsl:value-of select="tib:trim($Entry/ConsumerTransactionId)"/>
                </ConsumerTransactionId>
                <Tender>
                    <Type>
                        <Code>
                            <xsl:value-of select="tib:trim($Entry/Code)"/>
                        </Code>
                        <SubCode>
                            <xsl:value-of select="tib:trim($Entry/SubCode)"/>
                        </SubCode>
                    </Type>
                    <Token>
                        <xsl:attribute name="scheme">
                            <xsl:value-of select="tib:trim($Entry/Scheme)"/>
                        </xsl:attribute>
                        <xsl:attribute name="scope">
                            <xsl:value-of select="tib:trim($Entry/Scope)"/>
                        </xsl:attribute>
                        <xsl:choose>
                            <xsl:when test="upper-case(tib:trim($Entry/IsTemporary))='Y'">
                                <xsl:attribute name="isTemporary">
                                    <xsl:value-of select="1"/>
                                </xsl:attribute>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="isTemporary">
                                    <xsl:value-of select="0"/>
                                </xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:attribute name="expiration">
                            <xsl:value-of select="tib:trim($Entry/Expiration)"/>
                        </xsl:attribute>
                        <xsl:value-of select="tib:trim($Entry/Token)"/>
                    </Token>
                </Tender>
                <xsl:choose>
                    <xsl:when test="not (contains(tib:trim($Entry/SubCode), $_globalVariables/ns1:GlobalVariables/PaymentService/Constants/PrivateLabelCreditCard))&#xA;and&#xA;(string-length(tib:trim($Entry/MetaData1)) > 0&#xA;and &#xA;string-length(tib:trim($Entry/MetaData2)) > 0&#xA;)">
                        <CardMetadata>
                            <CardHolderName>
                                <FullName/>
                            </CardHolderName>
                            <CardExpiration>
                                <Year>
                                    <xsl:value-of select="tib:trim($Entry/MetaData2)"/>
                                </Year>
                                <Month>
                                    <xsl:value-of select="tib:trim($Entry/MetaData1)"/>
                                </Month>
                            </CardExpiration>
                        </CardMetadata>
                    </xsl:when>
                    <xsl:otherwise>
                        <CardMetadata>
                            <CardHolderName>
                                <FullName/>
                            </CardHolderName>
                        </CardMetadata>
                    </xsl:otherwise>
                </xsl:choose>
                <Authorization>
                    <Code>
                        <xsl:value-of select="tib:trim($Entry/AuthCode)"/>
                    </Code>
                    <Expiration>
                        <xsl:value-of select="tib:trim($Entry/TimeExpiration)"/>
                    </Expiration>
                    <CurrencyCode>
                        <xsl:value-of select="tib:trim($Entry/AuthCurrencyCode)"/>
                    </CurrencyCode>
                    <Amount>
                        <xsl:value-of select="tib:trim($Entry/Amount)"/>
                    </Amount>
                </Authorization>
                <CurrencyCode>
                    <xsl:value-of select="tib:trim($Entry/CapCurrencyCode)"/>
                </CurrencyCode>
                <CaptureAmount>
                    <xsl:value-of select="tib:trim($Entry/CaptureAmount)"/>
                </CaptureAmount>
                <xsl:if test="string-length(tib:trim($Entry/IncludedTaxAmount))>0">
                    <IncludedTaxAmount>
                        <xsl:value-of select="tib:trim($Entry/IncludedTaxAmount)"/>
                    </IncludedTaxAmount>
                </xsl:if>
                <PaymentPlanCode>
                    <xsl:value-of select="tib:trim($Entry/PaymentPlanCode)"/>
                </PaymentPlanCode>
                <ChargeDescription>
                    <xsl:value-of select="tib:trim($Entry/ChargeDescription)"/>
                </ChargeDescription>
            </ns:CreditCardPostAuthorizationRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ValidateXmlRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>320</pd:x>
        <pd:y>35</pd:y>
        <config>
            <processName>/BusinessProcesses/CreditPostAuthorization/RequestProcessors/ValidateXmlRequest.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <paymentservicerequest>
                    <xsl:value-of select="tib:render-xml($MapAdapterRequest/ns:CreditCardPostAuthorizationRequest)"/>
                </paymentservicerequest>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SendExceptionRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>340</pd:x>
        <pd:y>152</pd:y>
        <config>
            <processName>/CommonProcesses/CLEClientStub/SendExceptionRequest.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns12:ExceptionHandlerRequest>
                <ns12:envCode>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ENV"/>
                </ns12:envCode>
                <ns12:appCode>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CLE/AppCode"/>
                </ns12:appCode>
                <ns12:interfaceCode>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/PostAuthorization/CLE/DTCMOInterfaceCode"/>
                </ns12:interfaceCode>
                <ns12:hostName>
                    <xsl:value-of select="BW:getHostName()"/>
                </ns12:hostName>
                <ns12:timeStamp>
                    <xsl:value-of select="current-dateTime()"/>
                </ns12:timeStamp>
                <ns12:message>
                    <xsl:value-of select="$_error/ns2:ErrorReport/Msg"/>
                </ns12:message>
                <xsl:choose xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                    <xsl:when test="string-length($Start/pfx4:Entry) > 0">
                        <ns12:payload>
                            <xsl:value-of select="tib:render-xml($Start/pfx4:Entry)"/>
                        </ns12:payload>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns12:payload>
                            <xsl:value-of select="&quot;&quot;"/>
                        </ns12:payload>
                    </xsl:otherwise>
                </xsl:choose>
                <ns12:ErrorLevel>
                    <ns12:errorCode>
                        <xsl:value-of select="$_error/ns2:ErrorReport/MsgCode"/>
                    </ns12:errorCode>
                </ns12:ErrorLevel>
                <ns12:TransactionDetails>
                    <ns12:transactionDomain>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                    </ns12:transactionDomain>
                    <ns12:transactionType>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/PostAuthorization/CLE/TransactionType"/>
                    </ns12:transactionType>
                    <ns12:transactionID>
                        <xsl:value-of select="$Start/pfx4:Entry/TransactionId"/>
                    </ns12:transactionID>
                </ns12:TransactionDetails>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$_processContext/ns2:ProcessContext">
                    <ns12:ProcessContextDetails>
                        <ns12:processId>
                            <xsl:value-of select="ProcessId"/>
                        </ns12:processId>
                        <ns12:projectName>
                            <xsl:value-of select="ProjectName"/>
                        </ns12:projectName>
                        <ns12:engineName>
                            <xsl:value-of select="EngineName"/>
                        </ns12:engineName>
                        <ns12:restartedFromCheckpoint>
                            <xsl:value-of select="RestartedFromCheckpoint"/>
                        </ns12:restartedFromCheckpoint>
                        <xsl:for-each select="TrackingInfo">
                            <ns12:trackingInfo>
                                <xsl:value-of select="."/>
                            </ns12:trackingInfo>
                        </xsl:for-each>
                    </ns12:ProcessContextDetails>
                </xsl:for-each>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$_error/ns2:ErrorReport">
                    <ns12:ErrorReportType>
                        <ns12:stackTrace>
                            <xsl:value-of select="StackTrace"/>
                        </ns12:stackTrace>
                        <ns12:msg>
                            <xsl:value-of select="Msg"/>
                        </ns12:msg>
                        <ns12:fullClass>
                            <xsl:value-of select="FullClass"/>
                        </ns12:fullClass>
                        <ns12:class>
                            <xsl:value-of select="Class"/>
                        </ns12:class>
                        <ns12:processStack>
                            <xsl:value-of select="ProcessStack"/>
                        </ns12:processStack>
                        <xsl:if test="MsgCode">
                            <ns12:msgCode>
                                <xsl:value-of select="MsgCode"/>
                            </ns12:msgCode>
                        </xsl:if>
                        <xsl:if test="Data">
                            <ns12:data>
                                <xsl:value-of select="tib:render-xml(Data)"/>
                            </ns12:data>
                        </xsl:if>
                    </ns12:ErrorReportType>
                </xsl:for-each>
            </ns12:ExceptionHandlerRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapRequestValidationErrorResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>479</pd:x>
        <pd:y>151</pd:y>
        <config>
            <element ref="ns:CreditCardPostAuthorizationResponse"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Entry" select="$Start/pfx4:Entry"/>
            <ns:CreditCardPostAuthorizationResponse>
                <xsl:attribute name="version">
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/PostAuthorization/MessageVersion"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="$Start/pfx4:Entry/EnvironmentIdentifier"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="$Start/pfx4:Entry/RegionIdentifier"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="$Start/pfx4:Entry/SourceSystemIdentifier"/>
                    </SourceSystemIdentifier>
                    <TransactionId>
                        <xsl:value-of select="$Start/pfx4:Entry/TransactionId"/>
                    </TransactionId>
                    <TransactionTime>
                        <xsl:value-of select="current-dateTime()"/>
                    </TransactionTime>
                </SystemContext>
                <PaymentContext>
                    <Concept>
                        <xsl:value-of select="$Start/pfx4:Entry/Concept"/>
                    </Concept>
                    <Channel>
                        <xsl:value-of select="$Start/pfx4:Entry/Channel"/>
                    </Channel>
                </PaymentContext>
                <xsl:for-each select="$_error/ns2:ErrorReport">
                    <Error>
                        <Type>
                            <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Type"/>
                        </Type>
                        <Detail>
                            <xsl:value-of select="&quot;&quot;"/>
                        </Detail>
                        <ErrorMessage>
                            <xsl:value-of select="Msg"/>
                        </ErrorMessage>
                    </Error>
                </xsl:for-each>
            </ns:CreditCardPostAuthorizationResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>200</pd:x>
        <pd:y>153</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>MapAdapterRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapAdapterRequest</pd:from>
        <pd:to>ValidateXmlRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidateXmlRequest</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>SendExceptionRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SendExceptionRequest</pd:from>
        <pd:to>MapRequestValidationErrorResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapRequestValidationErrorResponse</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>