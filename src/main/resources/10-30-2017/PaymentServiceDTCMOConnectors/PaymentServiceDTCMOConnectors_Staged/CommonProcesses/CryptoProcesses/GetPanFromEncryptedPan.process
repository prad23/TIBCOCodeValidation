<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx2="http://www.ultimosoft.com/CLEH/ExceptionHandler.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://ecommerce.wsgc.com/2013/Common" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns="http://www.tibco.com/pe/DeployedVarsType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns1="www.tibco.com/plugin/java/JavaMethodActivityOutput" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns2="www.tibco.com/plugin/java/JavaMethodActivityInput" xmlns:ns3="http://www.tibco.com/pe/EngineTypes" xmlns:ns4="http://schemas.tibco.com/bw/plugins/java/5.0/javaExceptions">
    <pd:name>CommonProcesses/CryptoProcesses/GetPanFromEncryptedPan.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Token" type="xsd:string"/>
                    <xsd:element name="Scheme" type="xsd:string"/>
                    <xsd:element name="Scope" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>34</pd:startX>
    <pd:startY>92</pd:startY>
    <pd:returnBindings>
        <root>
            <xsl:if test="string-length($Error/root/ErrorMessage)=0">
                <CardDetails>
                    <PAN>
                        <xsl:value-of select="$GetPan/javaCodeActivityOutput/pan"/>
                    </PAN>
                </CardDetails>
            </xsl:if>
            <xsl:if test="string-length($Error/root/ErrorMessage)>0">
                <Error>
                    <Type>
                        <xsl:value-of select="$Error/root/ErrorType"/>
                    </Type>
                    <xsl:if test="$Error/root/ErrorDetail">
                        <Detail>
                            <xsl:value-of select="$Error/root/ErrorDetail"/>
                        </Detail>
                    </xsl:if>
                    <ErrorMessage>
                        <xsl:value-of select="$Error/root/ErrorMessage"/>
                    </ErrorMessage>
                </Error>
            </xsl:if>
            <xsl:if test="string-length($Error/root/CLE/ErrorReportType)>0">
                <CLEErrorReport>
                    <xsl:copy-of select="$Error/root/CLE/ErrorReportType/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Error/root/CLE/ErrorReportType/@*"/>
                    <xsl:copy-of select="$Error/root/CLE/ErrorReportType/node()"/>
                </CLEErrorReport>
            </xsl:if>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="CardDetails" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="PAN" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="Error" type="pfx:ErrorType" minOccurs="0"/>
                    <xsd:element name="CLEErrorReport" type="pfx2:ErrorReportType" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>690</pd:endX>
    <pd:endY>91</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables>
        <Error>
            <xsd:element name="root">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="ErrorType" type="xsd:string" minOccurs="0"/>
                        <xsd:element name="ErrorDetail" type="xsd:string" minOccurs="0"/>
                        <xsd:element name="ErrorMessage" type="xsd:string" minOccurs="0"/>
                        <xsd:element name="CLE" minOccurs="0">
                            <xsd:complexType>
                                <xsd:sequence>
                                    <xsd:element name="ErrorReportType" type="pfx2:ErrorReportType"/>
                                </xsd:sequence>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </Error>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1430416777192</pd:targetNamespace>
    <pd:activity name="Assign">
        <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
        <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
        <pd:x>541</pd:x>
        <pd:y>205</pd:y>
        <config>
            <variableName>Error</variableName>
        </config>
        <pd:inputBindings>
            <xsl:choose>
                <xsl:when test="contains($_error_GetPan/ns4:InvocationException/exceptionClassName,$_globalVariables/ns:GlobalVariables/CryptoProcesses/TokenizationExceptionClass)">
                    <root>
                        <ErrorType>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_TOKEN/Type"/>
                        </ErrorType>
                        <xsl:if test="string-length($_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_TOKEN/Detail)>0">
                            <ErrorDetail>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_TOKEN/Detail"/>
                            </ErrorDetail>
                        </xsl:if>
                        <ErrorMessage>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_TOKEN/ErrorMessage"/>
                        </ErrorMessage>
                        <CLE>
                            <ErrorReportType>
                                <xsl:if test="$_error/ns3:ErrorReport/StackTrace">
                                    <pfx2:stackTrace>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/StackTrace"/>
                                    </pfx2:stackTrace>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/Msg">
                                    <pfx2:msg>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/Msg"/>
                                    </pfx2:msg>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/FullClass">
                                    <pfx2:fullClass>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/FullClass"/>
                                    </pfx2:fullClass>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/Class">
                                    <pfx2:class>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/Class"/>
                                    </pfx2:class>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/ProcessStack">
                                    <pfx2:processStack>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/ProcessStack"/>
                                    </pfx2:processStack>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/MsgCode">
                                    <pfx2:msgCode>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/MsgCode"/>
                                    </pfx2:msgCode>
                                </xsl:if>
                                <pfx2:data>
                                    <xsl:value-of select="tib:render-xml($_error/ns3:ErrorReport/Data/*)"/>
                                </pfx2:data>
                            </ErrorReportType>
                        </CLE>
                    </root>
                </xsl:when>
                <xsl:otherwise>
                    <root>
                        <ErrorType>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonInternalErrors/PanFromEncryptedPan/COMMON_INTERNAL_ERROR_PAN_FROM_ENCRYPTED_PAN/Type"/>
                        </ErrorType>
                        <xsl:if test="string-length($_globalVariables/ns:GlobalVariables/PaymentService/CommonInternalErrors/PanFromEncryptedPan/COMMON_INTERNAL_ERROR_PAN_FROM_ENCRYPTED_PAN/Detail)>0">
                            <ErrorDetail>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonInternalErrors/PanFromEncryptedPan/COMMON_INTERNAL_ERROR_PAN_FROM_ENCRYPTED_PAN/Detail"/>
                            </ErrorDetail>
                        </xsl:if>
                        <ErrorMessage>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonInternalErrors/PanFromEncryptedPan/COMMON_INTERNAL_ERROR_PAN_FROM_ENCRYPTED_PAN/ErrorMessage"/>
                        </ErrorMessage>
                        <CLE>
                            <ErrorReportType>
                                <xsl:if test="$_error/ns3:ErrorReport/StackTrace">
                                    <pfx2:stackTrace>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/StackTrace"/>
                                    </pfx2:stackTrace>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/Msg">
                                    <pfx2:msg>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/Msg"/>
                                    </pfx2:msg>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/FullClass">
                                    <pfx2:fullClass>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/FullClass"/>
                                    </pfx2:fullClass>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/Class">
                                    <pfx2:class>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/Class"/>
                                    </pfx2:class>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/ProcessStack">
                                    <pfx2:processStack>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/ProcessStack"/>
                                    </pfx2:processStack>
                                </xsl:if>
                                <xsl:if test="$_error/ns3:ErrorReport/MsgCode">
                                    <pfx2:msgCode>
                                        <xsl:value-of select="$_error/ns3:ErrorReport/MsgCode"/>
                                    </pfx2:msgCode>
                                </xsl:if>
                                <pfx2:data>
                                    <xsl:value-of select="tib:render-xml($_error/ns3:ErrorReport/Data/*)"/>
                                </pfx2:data>
                            </ErrorReportType>
                        </CLE>
                    </root>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="AuditBeginLog">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>280</pd:x>
        <pd:y>92</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/AuditLogMessage.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <InterfaceCode>
                    <xsl:value-of select="$GetTransactionDetails/root/InterfaceCode"/>
                </InterfaceCode>
                <AuditMessageType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/IngrianRequest"/>
                </AuditMessageType>
                <payloadTrue>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/PayloadTrue"/>
                </payloadTrue>
                <pfx2:LogRequest>
                    <pfx2:envCode>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/ENV"/>
                    </pfx2:envCode>
                    <pfx2:appCode>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CLE/AppCode"/>
                    </pfx2:appCode>
                    <pfx2:interfaceCode>
                        <xsl:value-of select="$GetTransactionDetails/root/InterfaceCode"/>
                    </pfx2:interfaceCode>
                    <pfx2:timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx2:timestamp>
                    <pfx2:message>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/IngrianRequestMsg"/>
                    </pfx2:message>
                    <pfx2:TransactionDetails>
                        <pfx2:transactionDomain>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                        </pfx2:transactionDomain>
                        <pfx2:transactionType>
                            <xsl:value-of select="$GetTransactionDetails/root/TransactionType"/>
                        </pfx2:transactionType>
                        <pfx2:transactionID>
                            <xsl:value-of select="$GetTransactionDetails/root/TransactionId"/>
                        </pfx2:transactionID>
                    </pfx2:TransactionDetails>
                    <pfx2:AuditInfo>
                        <pfx2:payload>
                            <xsl:value-of select="''"/>
                        </pfx2:payload>
                        <pfx2:auditStep>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/IngrianRequest"/>
                        </pfx2:auditStep>
                    </pfx2:AuditInfo>
                </pfx2:LogRequest>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="AuditEndLog">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>573</pd:x>
        <pd:y>91</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/AuditLogMessage.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <InterfaceCode>
                    <xsl:value-of select="$GetTransactionDetails/root/InterfaceCode"/>
                </InterfaceCode>
                <AuditMessageType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/IngrianResponse"/>
                </AuditMessageType>
                <payloadTrue>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/PayloadTrue"/>
                </payloadTrue>
                <pfx2:LogRequest>
                    <pfx2:envCode>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/ENV"/>
                    </pfx2:envCode>
                    <pfx2:appCode>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CLE/AppCode"/>
                    </pfx2:appCode>
                    <pfx2:interfaceCode>
                        <xsl:value-of select="$GetTransactionDetails/root/InterfaceCode"/>
                    </pfx2:interfaceCode>
                    <pfx2:timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx2:timestamp>
                    <pfx2:message>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/IngrianResponseMsg"/>
                    </pfx2:message>
                    <pfx2:TransactionDetails>
                        <pfx2:transactionDomain>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                        </pfx2:transactionDomain>
                        <pfx2:transactionType>
                            <xsl:value-of select="$GetTransactionDetails/root/TransactionType"/>
                        </pfx2:transactionType>
                        <pfx2:transactionID>
                            <xsl:value-of select="$GetTransactionDetails/root/TransactionId"/>
                        </pfx2:transactionID>
                    </pfx2:TransactionDetails>
                    <pfx2:AuditInfo>
                        <pfx2:payload>
                            <xsl:value-of select="''"/>
                        </pfx2:payload>
                        <pfx2:auditStep>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CryptoProcesses/CLE/IngrianResponse"/>
                        </pfx2:auditStep>
                    </pfx2:AuditInfo>
                </pfx2:LogRequest>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>391</pd:x>
        <pd:y>207</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetConfigHandle">
        <pd:type>com.tibco.plugin.java.JavaMethodActivity</pd:type>
        <pd:resourceType>ae.activities.JavaMethodActivity</pd:resourceType>
        <pd:x>387</pd:x>
        <pd:y>89</pd:y>
        <config>
            <ConstructDeclaredClass>false</ConstructDeclaredClass>
            <CacheConstructedClass>false</CacheConstructedClass>
            <InvokeCleanupMethod>false</InvokeCleanupMethod>
            <JavaGlobalInstance>/CommonProcesses/CryptoProcesses/CryptoEnvironment.serviceagent</JavaGlobalInstance>
            <MethodInfo>
                <className>com.wsgc.ecommerce.tokenization.runtime.EnvironmentHandle</className>
                <methodName>getConfigurationHandle</methodName>
                <methodReturn>com.wsgc.ecommerce.tokenization.runtime.ConfigurationHandle</methodReturn>
            </MethodInfo>
        </config>
        <pd:inputBindings>
            <ns2:JavaMethodActivityInput/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetPan">
        <pd:type>com.tibco.plugin.java.JavaActivity</pd:type>
        <pd:resourceType>ae.javapalette.javaActivity</pd:resourceType>
        <pd:x>486</pd:x>
        <pd:y>91</pd:y>
        <config>
            <fileName>GetPanFromEncryptedPanGetPan</fileName>
            <packageName>CommonProcesses.CryptoProcesses.GetPanFromEncryptedPan</packageName>
            <fullsource>package CommonProcesses.CryptoProcesses.GetPanFromEncryptedPan;
import java.util.*;
import java.io.*;
import com.wsgc.ecommerce.tokenization.runtime.ConfigurationHandle;
import com.wsgc.ecommerce.tokenization.PaymentToken;
import com.wsgc.ecommerce.tokenization.TokenizationContext;
import com.wsgc.ecommerce.tokenization.TokenizationContexts;
import com.wsgc.ecommerce.tokenization.CardExpiration;

public class GetPanFromEncryptedPanGetPan{
/****** START SET/GET METHOD, DO NOT MODIFY *****/
	protected Object confighandle = null;
	protected String scheme = "";
	protected String value = "";
	protected String scope = "";
	protected String environment = "";
	protected String pan = "";
	public Object getconfighandle() {
		return confighandle;
	}
	public void setconfighandle(Object val) {
		confighandle = val;
	}
	public String getscheme() {
		return scheme;
	}
	public void setscheme(String val) {
		scheme = val;
	}
	public String getvalue() {
		return value;
	}
	public void setvalue(String val) {
		value = val;
	}
	public String getscope() {
		return scope;
	}
	public void setscope(String val) {
		scope = val;
	}
	public String getenvironment() {
		return environment;
	}
	public void setenvironment(String val) {
		environment = val;
	}
	public String getpan() {
		return pan;
	}
	public void setpan(String val) {
		pan = val;
	}
/****** END SET/GET METHOD, DO NOT MODIFY *****/
	public GetPanFromEncryptedPanGetPan() {
	}
	public void invoke() throws Exception {
/* Available Variables: DO NOT MODIFY
	In  : Object confighandle
	In  : String scheme
	In  : String value
	In  : String scope
	In  : String environment
	Out : String pan
* Available Variables: DO NOT MODIFY *****/
try{
com.wsgc.ecommerce.tokenization.runtime.ConfigurationHandle ch = (com.wsgc.ecommerce.tokenization.runtime.ConfigurationHandle) getconfighandle();

TokenizationContext ctx =com.wsgc.ecommerce.tokenization.TokenizationContexts.forCurrentTime();
com.wsgc.ecommerce.tokenization.PaymentToken pt = new PaymentToken(getscheme(),getvalue(),getscope(), false, new java.util.Date(java.lang.System.currentTimeMillis()+100000));

com.wsgc.ecommerce.tokenization.AccountData ad = ch.getEnvironment(environment).getPaymentProvider().detokenize(pt, ctx);

setpan(ad.getAccountNumberString());



} catch (Exception e) {

		e.printStackTrace();
	throw e;
	}

}
}
</fullsource>
            <inputData>
                <row>
                    <fieldName>confighandle</fieldName>
                    <fieldType>ObjectReference</fieldType>
                    <fieldRequired>required</fieldRequired>
                </row>
                <row>
                    <fieldName>scheme</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>required</fieldRequired>
                </row>
                <row>
                    <fieldName>value</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>required</fieldRequired>
                </row>
                <row>
                    <fieldName>scope</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>required</fieldRequired>
                </row>
                <row>
                    <fieldName>environment</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>required</fieldRequired>
                </row>
            </inputData>
            <outputData>
                <row>
                    <fieldName>pan</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
            </outputData>
            <byteCode>
                <class>
                    <name>GetPanFromEncryptedPanGetPan</name>
                    <byteCode>yv66vgAAADMAdQkAHQBBCQAdAEIJAB0AQwkAHQBECQAdAEUJAB0ARgoAHgBHCABICgAdAEkHAEoKAEsATAcATQoAHQBOCgAdAE8KAB0AUAcAUQoAUgBTBQAAAAAAAYagCgAQAFQKAAwAVQsACgBWCgBXAFgLAFkAWgoAWwBcCgAdAF0HAF4KABsAXwcAYAcAYQEADGNvbmZpZ2hhbmRsZQEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABnNjaGVtZQEAEkxqYXZhL2xhbmcvU3RyaW5nOwEABXZhbHVlAQAFc2NvcGUBAAtlbnZpcm9ubWVudAEAA3BhbgEAD2dldGNvbmZpZ2hhbmRsZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAD3NldGNvbmZpZ2hhbmRsZQEAFShMamF2YS9sYW5nL09iamVjdDspVgEACWdldHNjaGVtZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAJc2V0c2NoZW1lAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAIZ2V0dmFsdWUBAAhzZXR2YWx1ZQEACGdldHNjb3BlAQAIc2V0c2NvcGUBAA5nZXRlbnZpcm9ubWVudAEADnNldGVudmlyb25tZW50AQAGZ2V0cGFuAQAGc2V0cGFuAQAGPGluaXQ+AQADKClWAQAGaW52b2tlAQANU3RhY2tNYXBUYWJsZQcAXgEACkV4Y2VwdGlvbnMBAApTb3VyY2VGaWxlAQAhR2V0UGFuRnJvbUVuY3J5cHRlZFBhbkdldFBhbi5qYXZhDAAfACAMACEAIgwAIwAiDAAkACIMACUAIgwAJgAiDAA5ADoBAAAMACcAKAEAO2NvbS93c2djL2Vjb21tZXJjZS90b2tlbml6YXRpb24vcnVudGltZS9Db25maWd1cmF0aW9uSGFuZGxlBwBiDABjAGQBACxjb20vd3NnYy9lY29tbWVyY2UvdG9rZW5pemF0aW9uL1BheW1lbnRUb2tlbgwALQAuDAAxAC4MADMALgEADmphdmEvdXRpbC9EYXRlBwBlDABmAGcMADkAaAwAOQBpDABqAGsHAGwMAG0AbgcAbwwAcABxBwByDABzAC4MADgAMAEAE2phdmEvbGFuZy9FeGNlcHRpb24MAHQAOgEAU0NvbW1vblByb2Nlc3Nlcy9DcnlwdG9Qcm9jZXNzZXMvR2V0UGFuRnJvbUVuY3J5cHRlZFBhbi9HZXRQYW5Gcm9tRW5jcnlwdGVkUGFuR2V0UGFuAQAQamF2YS9sYW5nL09iamVjdAEANGNvbS93c2djL2Vjb21tZXJjZS90b2tlbml6YXRpb24vVG9rZW5pemF0aW9uQ29udGV4dHMBAA5mb3JDdXJyZW50VGltZQEANygpTGNvbS93c2djL2Vjb21tZXJjZS90b2tlbml6YXRpb24vVG9rZW5pemF0aW9uQ29udGV4dDsBABBqYXZhL2xhbmcvU3lzdGVtAQARY3VycmVudFRpbWVNaWxsaXMBAAMoKUoBAAQoSilWAQBKKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nO1pMamF2YS91dGlsL0RhdGU7KVYBAA5nZXRFbnZpcm9ubWVudAEATyhMamF2YS9sYW5nL1N0cmluZzspTGNvbS93c2djL2Vjb21tZXJjZS90b2tlbml6YXRpb24vcnVudGltZS9FbnZpcm9ubWVudEhhbmRsZTsBADljb20vd3NnYy9lY29tbWVyY2UvdG9rZW5pemF0aW9uL3J1bnRpbWUvRW52aXJvbm1lbnRIYW5kbGUBABJnZXRQYXltZW50UHJvdmlkZXIBAD8oKUxjb20vd3NnYy9lY29tbWVyY2UvdG9rZW5pemF0aW9uL1BheW1lbnRUb2tlbml6YXRpb25Qcm92aWRlcjsBADtjb20vd3NnYy9lY29tbWVyY2UvdG9rZW5pemF0aW9uL1BheW1lbnRUb2tlbml6YXRpb25Qcm92aWRlcgEACmRldG9rZW5pemUBAJIoTGNvbS93c2djL2Vjb21tZXJjZS90b2tlbml6YXRpb24vUGF5bWVudFRva2VuO0xjb20vd3NnYy9lY29tbWVyY2UvdG9rZW5pemF0aW9uL1Rva2VuaXphdGlvbkNvbnRleHQ7KUxjb20vd3NnYy9lY29tbWVyY2UvdG9rZW5pemF0aW9uL0FjY291bnREYXRhOwEAK2NvbS93c2djL2Vjb21tZXJjZS90b2tlbml6YXRpb24vQWNjb3VudERhdGEBABZnZXRBY2NvdW50TnVtYmVyU3RyaW5nAQAPcHJpbnRTdGFja1RyYWNlACEAHQAeAAAABgAEAB8AIAAAAAQAIQAiAAAABAAjACIAAAAEACQAIgAAAAQAJQAiAAAABAAmACIAAAAOAAEAJwAoAAEAKQAAAB0AAQABAAAABSq0AAGwAAAAAQAqAAAABgABAAAAEwABACsALAABACkAAAAiAAIAAgAAAAYqK7UAAbEAAAABACoAAAAKAAIAAAAWAAUAFwABAC0ALgABACkAAAAdAAEAAQAAAAUqtAACsAAAAAEAKgAAAAYAAQAAABkAAQAvADAAAQApAAAAIgACAAIAAAAGKiu1AAKxAAAAAQAqAAAACgACAAAAHAAFAB0AAQAxAC4AAQApAAAAHQABAAEAAAAFKrQAA7AAAAABACoAAAAGAAEAAAAfAAEAMgAwAAEAKQAAACIAAgACAAAABiortQADsQAAAAEAKgAAAAoAAgAAACIABQAjAAEAMwAuAAEAKQAAAB0AAQABAAAABSq0AASwAAAAAQAqAAAABgABAAAAJQABADQAMAABACkAAAAiAAIAAgAAAAYqK7UABLEAAAABACoAAAAKAAIAAAAoAAUAKQABADUALgABACkAAAAdAAEAAQAAAAUqtAAFsAAAAAEAKgAAAAYAAQAAACsAAQA2ADAAAQApAAAAIgACAAIAAAAGKiu1AAWxAAAAAQAqAAAACgACAAAALgAFAC8AAQA3AC4AAQApAAAAHQABAAEAAAAFKrQABrAAAAABACoAAAAGAAEAAAAxAAEAOAAwAAEAKQAAACIAAgACAAAABiortQAGsQAAAAEAKgAAAAoAAgAAADQABQA1AAEAOQA6AAEAKQAAAFwAAgABAAAAKCq3AAcqAbUAASoSCLUAAioSCLUAAyoSCLUABCoSCLUABSoSCLUABrEAAAABACoAAAAiAAgAAAA3AAQADAAJAA0ADwAOABUADwAbABAAIQARACcAOAABADsAOgACACkAAACsAAwABQAAAFkqtgAJwAAKTLgAC027AAxZKrYADSq2AA4qtgAPA7sAEFm4ABEUABJhtwAUtwAVTisqtAAFuQAWAgC2ABctLLkAGAMAOgQqGQS2ABm2ABqnAApMK7YAHCu/sQABAAAATgBRABsAAgAqAAAAKgAKAAAAQwAIAEUADABGAC8ASABFAEoATgBSAFEATgBSAFAAVgBRAFgAVAA8AAAACQAC9wBRBwA9BgA+AAAABAABABsAAQA/AAAAAgBA</byteCode>
                </class>
            </byteCode>
        </config>
        <pd:inputBindings>
            <javaCodeActivityInput>
                <confighandle>
                    <xsl:value-of select="$GetConfigHandle/ns1:JavaMethodActivityOutput/MethodReturnValue"/>
                </confighandle>
                <scheme>
                    <xsl:value-of select="$Start/root/Scheme"/>
                </scheme>
                <value>
                    <xsl:value-of select="$Start/root/Token"/>
                </value>
                <scope>
                    <xsl:value-of select="$Start/root/Scope"/>
                </scope>
                <environment>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/ENV"/>
                </environment>
            </javaCodeActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetTransactionDetails">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>154</pd:x>
        <pd:y>91</pd:y>
        <config>
            <variableConfig>/CommonProcesses/InterfaceDetails.jobsharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>GetTransactionDetails</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetConfigHandle</pd:from>
        <pd:to>GetPan</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPan</pd:from>
        <pd:to>AuditEndLog</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Assign</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Assign</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditEndLog</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditBeginLog</pd:from>
        <pd:to>GetConfigHandle</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetTransactionDetails</pd:from>
        <pd:to>AuditBeginLog</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>