<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:ns61="http://www.wsgc.com/schemas/common/PaymentServicePPCVTypeValues.xsd" xmlns:pfx="http://www.tibco.com/schemas/Payment Services/CreditAuthResponseSchema.xsd" xmlns:ns="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns12="http://www.ultimosoft.com/CLEH/ExceptionHandler.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns2="http://www.wsgc.com/schemas/common/PaymentGatewayAuthorizationStatusCodes.xsd" xmlns:ns3="http://www.wsgc.com/schemas/common/PaymentServiceCreditAuthorizationValidity.xsd" xmlns:ns4="http://www.wsgc.com/schemas/common/PaymentServiceWSIDeclineRules.xsd" xmlns:pfx2="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XMLSchemas/Verifone/CreditPreAuthorizationResponse.xsd" xmlns:ns5="http://www.services.wsgc.com/2014/Payment/Verfione/UGP/Credit/PreAuthorizationResponse" xmlns:pfx3="http://services.wsgc.com/2014/Payment" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns6="http://www.services.wsgc.com/2014/Payment/Verfione/UGP/PLCC/PreAuthorizationResponse" xmlns:ns7="http://www.tibco.com/schemas/PaymentServices/SharedResources/PLCC_UGPResponse.xsd" xmlns:pfx6="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx7="http://ecommerce.wsgc.com/2013/Common" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions">
    <xsd:import namespace="http://www.tibco.com/schemas/Payment Services/CreditAuthResponseSchema.xsd" schemaLocation="/CreditAuthResponse Schema.xsd"/>
    <xsd:import namespace="http://services.wsgc.com/2014/Payment" schemaLocation="/SharedResources/XMLSchemas/PaymentServices/2014/Payment/credit-authorization.xsd"/>
    <xsd:import namespace="http://ecommerce.wsgc.com/2013/Common" schemaLocation="/SharedResources/XMLSchemas/2013/Common/base-types.xsd"/>
    <pd:name>BusinessProcesses/CreditAuthorization/ResponseProcessors/MapPaymentServiceResponse-PLCC.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="paymentgatewayresponse" type="xsd:string"/>
                    <xsd:element ref="pfx3:CreditCardAuthorizationRequest"/>
                    <xsd:element name="PAN" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="TenderSubType" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="Error" type="pfx7:ErrorType" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>154</pd:startX>
    <pd:startY>520</pd:startY>
    <pd:returnBindings>
        <xsl:choose>
            <xsl:when test="string-length($MapErrorResponse/pfx3:CreditCardAuthorizationResponse/@version) > 0">
                <xsl:for-each select="$MapErrorResponse/pfx3:CreditCardAuthorizationResponse">
                    <pfx3:CreditCardAuthorizationResponse>
                        <xsl:attribute name="version">
                            <xsl:value-of select="@version"/>
                        </xsl:attribute>
                        <xsl:for-each select="SystemContext">
                            <SystemContext>
                                <EnvironmentIdentifier>
                                    <xsl:value-of select="EnvironmentIdentifier"/>
                                </EnvironmentIdentifier>
                                <RegionIdentifier>
                                    <xsl:value-of select="RegionIdentifier"/>
                                </RegionIdentifier>
                                <SourceSystemIdentifier>
                                    <xsl:value-of select="SourceSystemIdentifier"/>
                                </SourceSystemIdentifier>
                                <TransactionId>
                                    <xsl:value-of select="TransactionId"/>
                                </TransactionId>
                                <TransactionTime>
                                    <xsl:value-of select="TransactionTime"/>
                                </TransactionTime>
                                <xsl:if test="RoutingSpecification">
                                    <RoutingSpecification>
                                        <xsl:value-of select="RoutingSpecification"/>
                                    </RoutingSpecification>
                                </xsl:if>
                                <xsl:if test="TestingMode">
                                    <TestingMode>
                                        <xsl:value-of select="TestingMode"/>
                                    </TestingMode>
                                </xsl:if>
                            </SystemContext>
                        </xsl:for-each>
                        <xsl:for-each select="PaymentContext">
                            <PaymentContext>
                                <Concept>
                                    <xsl:value-of select="Concept"/>
                                </Concept>
                                <Channel>
                                    <xsl:value-of select="Channel"/>
                                </Channel>
                            </PaymentContext>
                        </xsl:for-each>
                        <xsl:for-each select="Error">
                            <Error>
                                <Type>
                                    <xsl:value-of select="Type"/>
                                </Type>
                                <xsl:if test="string-length(Detail[1])>0">
                                    <xsl:for-each select="Detail">
                                        <Detail>
                                            <xsl:value-of select="."/>
                                        </Detail>
                                    </xsl:for-each>
                                </xsl:if>
                                <ErrorMessage>
                                    <xsl:value-of select="ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:for-each>
                    </pfx3:CreditCardAuthorizationResponse>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/pfx3:CreditCardAuthorizationResponse/@version) > 0">
                <xsl:for-each select="$ValidatePaymentGatewayResponse-v1/root/pfx3:CreditCardAuthorizationResponse">
                    <pfx3:CreditCardAuthorizationResponse>
                        <xsl:attribute name="version">
                            <xsl:value-of select="@version"/>
                        </xsl:attribute>
                        <xsl:for-each select="SystemContext">
                            <SystemContext>
                                <EnvironmentIdentifier>
                                    <xsl:value-of select="EnvironmentIdentifier"/>
                                </EnvironmentIdentifier>
                                <RegionIdentifier>
                                    <xsl:value-of select="RegionIdentifier"/>
                                </RegionIdentifier>
                                <SourceSystemIdentifier>
                                    <xsl:value-of select="SourceSystemIdentifier"/>
                                </SourceSystemIdentifier>
                                <TransactionId>
                                    <xsl:value-of select="TransactionId"/>
                                </TransactionId>
                                <TransactionTime>
                                    <xsl:value-of select="TransactionTime"/>
                                </TransactionTime>
                                <xsl:if test="RoutingSpecification">
                                    <RoutingSpecification>
                                        <xsl:value-of select="RoutingSpecification"/>
                                    </RoutingSpecification>
                                </xsl:if>
                                <xsl:if test="TestingMode">
                                    <TestingMode>
                                        <xsl:value-of select="TestingMode"/>
                                    </TestingMode>
                                </xsl:if>
                            </SystemContext>
                        </xsl:for-each>
                        <xsl:for-each select="PaymentContext">
                            <PaymentContext>
                                <Concept>
                                    <xsl:value-of select="Concept"/>
                                </Concept>
                                <Channel>
                                    <xsl:value-of select="Channel"/>
                                </Channel>
                            </PaymentContext>
                        </xsl:for-each>
                        <xsl:for-each select="Error">
                            <Error>
                                <Type>
                                    <xsl:value-of select="Type"/>
                                </Type>
                                <xsl:for-each select="Detail">
                                    <Detail>
                                        <xsl:value-of select="."/>
                                    </Detail>
                                </xsl:for-each>
                                <ErrorMessage>
                                    <xsl:value-of select="ErrorMessage"/>
                                </ErrorMessage>
                                <xsl:if test="string-length($GetLocalToken/root/TokenDetails/Token)>0">
                                    <Tender>
                                        <Type>
                                            <Code>
                                                <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/Tender/Type/Code"/>
                                            </Code>
                                            <xsl:choose>
                                                <xsl:when test="string-length($Start/root/TenderSubType)>0">
                                                    <xsl:if test="$Start/root/TenderSubType">
                                                        <SubCode>
                                                            <xsl:value-of select="$Start/root/TenderSubType"/>
                                                        </SubCode>
                                                    </xsl:if>
                                                </xsl:when>
                                                <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_MEDIA)>0">
                                                    <SubCode>
                                                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_MEDIA"/>
                                                    </SubCode>
                                                </xsl:when>
                                                <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_PAYMENT_MEDIA)>0">
                                                    <SubCode>
                                                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_PAYMENT_MEDIA"/>
                                                    </SubCode>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <SubCode>
                                                        <xsl:value-of select="&quot;&quot;"/>
                                                    </SubCode>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </Type>
                                        <Token>
                                            <xsl:attribute name="scheme">
                                                <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scheme"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="scope">
                                                <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scope"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="isTemporary">
                                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/BooleanSuccess"/>
                                            </xsl:attribute>
                                            <xsl:attribute name="expiration">
                                                <xsl:value-of select="$GetLocalToken/root/TokenDetails/Expiration"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Token"/>
                                        </Token>
                                        <xsl:if test="string-length($GenMktHash/root/TokenDetails/WSIMatchingTokenValue)>0">
                                            <Hash>
                                                <xsl:attribute name="scheme">
                                                    <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenScheme"/>
                                                </xsl:attribute>
                                                <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenValue"/>
                                            </Hash>
                                        </xsl:if>
                                        <xsl:if test="string-length($Start/root/PAN) >0">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="concat( tib:pad-and-limit(tib:left($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayFirst),(string-length($Start/root/PAN)-$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast),$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountMaskCharecter), tib:right($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast))"/>
                                            </MaskedAccountNumber>
                                        </xsl:if>
                                    </Tender>
                                </xsl:if>
                            </Error>
                        </xsl:for-each>
                    </pfx3:CreditCardAuthorizationResponse>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="string-length($ProcessPaymentGatewayResponse-v5/root/Error/Type) > 0">
                <pfx3:CreditCardAuthorizationResponse>
                    <xsl:attribute name="version">
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/MessageVersion"/>
                    </xsl:attribute>
                    <SystemContext>
                        <EnvironmentIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                        </EnvironmentIdentifier>
                        <RegionIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                        </RegionIdentifier>
                        <SourceSystemIdentifier>
                            <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                        </SourceSystemIdentifier>
                        <xsl:choose>
                            <xsl:when test="string-length($Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId)>0">
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Authorization/Constants/TransactionIdPrefix     ,   $Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId)"/>
                                </TransactionId>
                            </xsl:when>
                            <xsl:otherwise>
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Authorization/Constants/TransactionIdPrefix, tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV   , BW:getHostName())"/>
                                </TransactionId>
                            </xsl:otherwise>
                        </xsl:choose>
                        <TransactionTime>
                            <xsl:value-of select="current-dateTime()"/>
                        </TransactionTime>
                    </SystemContext>
                    <xsl:copy-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/PaymentContext"/>
                    <xsl:for-each select="$ProcessPaymentGatewayResponse-v5/root/Error">
                        <Error>
                            <Type>
                                <xsl:value-of select="Type"/>
                            </Type>
                            <xsl:if test="string-length($ProcessPaymentGatewayResponse-v5/root/Error/Detail[1])>0">
                                <xsl:for-each select="Detail">
                                    <Detail>
                                        <xsl:value-of select="."/>
                                    </Detail>
                                </xsl:for-each>
                            </xsl:if>
                            <ErrorMessage>
                                <xsl:value-of select="ErrorMessage"/>
                            </ErrorMessage>
                            <xsl:if test="string-length($GetLocalToken/root/TokenDetails/Token)>0">
                                <Tender>
                                    <Type>
                                        <Code>
                                            <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/Tender/Type/Code"/>
                                        </Code>
                                        <xsl:choose>
                                            <xsl:when test="string-length($Start/root/TenderSubType)>0">
                                                <xsl:if test="$Start/root/TenderSubType">
                                                    <SubCode>
                                                        <xsl:value-of select="$Start/root/TenderSubType"/>
                                                    </SubCode>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_MEDIA)>0">
                                                <SubCode>
                                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_MEDIA"/>
                                                </SubCode>
                                            </xsl:when>
                                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_PAYMENT_MEDIA)>0">
                                                <SubCode>
                                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_PAYMENT_MEDIA"/>
                                                </SubCode>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <SubCode>
                                                    <xsl:value-of select="&quot;&quot;"/>
                                                </SubCode>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </Type>
                                    <Token>
                                        <xsl:attribute name="scheme">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scheme"/>
                                        </xsl:attribute>
                                        <xsl:attribute name="scope">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scope"/>
                                        </xsl:attribute>
                                        <xsl:attribute name="isTemporary">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/BooleanSuccess"/>
                                        </xsl:attribute>
                                        <xsl:attribute name="expiration">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Expiration"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$GetLocalToken/root/TokenDetails/Token"/>
                                    </Token>
                                    <xsl:if test="string-length($GenMktHash/root/TokenDetails/WSIMatchingTokenValue)>0">
                                        <Hash>
                                            <xsl:attribute name="scheme">
                                                <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenScheme"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenValue"/>
                                        </Hash>
                                    </xsl:if>
                                    <xsl:choose>
                                        <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_ACCT_NUM)>0">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_ACCT_NUM"/>
                                            </MaskedAccountNumber>
                                        </xsl:when>
                                        <xsl:when test="string-length($Start/root/PAN)>0">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="concat( tib:pad-and-limit(tib:left($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayFirst),(string-length($Start/root/PAN)-$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast),$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountMaskCharecter), tib:right($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast))"/>
                                            </MaskedAccountNumber>
                                        </xsl:when>
                                        <xsl:otherwise/>
                                    </xsl:choose>
                                </Tender>
                            </xsl:if>
                        </Error>
                    </xsl:for-each>
                </pfx3:CreditCardAuthorizationResponse>
            </xsl:when>
            <xsl:when test="string-length($Start/root/Error/Type) > 0">
                <pfx3:CreditCardAuthorizationResponse>
                    <xsl:attribute name="version">
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/MessageVersion"/>
                    </xsl:attribute>
                    <SystemContext>
                        <EnvironmentIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                        </EnvironmentIdentifier>
                        <RegionIdentifier>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                        </RegionIdentifier>
                        <SourceSystemIdentifier>
                            <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                        </SourceSystemIdentifier>
                        <xsl:choose>
                            <xsl:when test="string-length($Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId)>0">
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Authorization/Constants/TransactionIdPrefix     ,   $Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId)"/>
                                </TransactionId>
                            </xsl:when>
                            <xsl:otherwise>
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Authorization/Constants/TransactionIdPrefix, tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV   , BW:getHostName())"/>
                                </TransactionId>
                            </xsl:otherwise>
                        </xsl:choose>
                        <TransactionTime>
                            <xsl:value-of select="current-dateTime()"/>
                        </TransactionTime>
                    </SystemContext>
                    <xsl:copy-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/PaymentContext"/>
                    <xsl:for-each select="$Start/root/Error">
                        <Error>
                            <Type>
                                <xsl:value-of select="Type"/>
                            </Type>
                            <xsl:for-each select="Detail">
                                <Detail>
                                    <xsl:value-of select="."/>
                                </Detail>
                            </xsl:for-each>
                            <ErrorMessage>
                                <xsl:value-of select="ErrorMessage"/>
                            </ErrorMessage>
                            <xsl:if test="string-length($GetLocalToken/root/TokenDetails/Token)>0">
                                <Tender>
                                    <Type>
                                        <Code>
                                            <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/Tender/Type/Code"/>
                                        </Code>
                                        <xsl:choose>
                                            <xsl:when test="string-length($Start/root/TenderSubType)>0">
                                                <xsl:if test="$Start/root/TenderSubType">
                                                    <SubCode>
                                                        <xsl:value-of select="$Start/root/TenderSubType"/>
                                                    </SubCode>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <SubCode>
                                                    <xsl:value-of select="&quot;&quot;"/>
                                                </SubCode>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </Type>
                                    <Token>
                                        <xsl:attribute name="scheme">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scheme"/>
                                        </xsl:attribute>
                                        <xsl:attribute name="scope">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Scope"/>
                                        </xsl:attribute>
                                        <xsl:attribute name="isTemporary">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/BooleanSuccess"/>
                                        </xsl:attribute>
                                        <xsl:attribute name="expiration">
                                            <xsl:value-of select="$GetLocalToken/root/TokenDetails/Expiration"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$GetLocalToken/root/TokenDetails/Token"/>
                                    </Token>
                                    <xsl:if test="string-length($GenMktHash/root/TokenDetails/WSIMatchingTokenValue)>0">
                                        <Hash>
                                            <xsl:attribute name="scheme">
                                                <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenScheme"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="$GenMktHash/root/TokenDetails/WSIMatchingTokenValue"/>
                                        </Hash>
                                    </xsl:if>
                                    <xsl:choose>
                                        <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_ACCT_NUM)>0">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_ACCT_NUM"/>
                                            </MaskedAccountNumber>
                                        </xsl:when>
                                        <xsl:when test="string-length($Start/root/PAN)>0">
                                            <MaskedAccountNumber>
                                                <xsl:value-of select="concat( tib:pad-and-limit(tib:left($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayFirst),(string-length($Start/root/PAN)-$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast),$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountMaskCharecter), tib:right($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast))"/>
                                            </MaskedAccountNumber>
                                        </xsl:when>
                                        <xsl:otherwise/>
                                    </xsl:choose>
                                </Tender>
                            </xsl:if>
                        </Error>
                    </xsl:for-each>
                </pfx3:CreditCardAuthorizationResponse>
            </xsl:when>
            <xsl:otherwise>
                <xsl:copy-of select="$MapPaymentServiceResponse/pfx3:CreditCardAuthorizationResponse"/>
            </xsl:otherwise>
        </xsl:choose>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx3:CreditCardAuthorizationResponse"/>
    <pd:endX>1372</pd:endX>
    <pd:endY>51</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1414172991752</pd:targetNamespace>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>973</pd:x>
        <pd:y>902</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetAuthorizationValidityParams">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>775</pd:x>
        <pd:y>243</pd:y>
        <config>
            <variableConfig>/SharedResources/SharedVariables/SV-PaymentServiceCreditAuthorizationValidity.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetCLEParams">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>329</pd:x>
        <pd:y>521</pd:y>
        <config>
            <variableConfig>/BusinessProcesses/CreditAuthorization/CLEParams.jobsharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="LogRequestValidationExceptionRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1370</pd:x>
        <pd:y>892</pd:y>
        <config>
            <processName>/CommonProcesses/CLEClientStub/SendExceptionRequest.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns12:ExceptionHandlerRequest>
                <ns12:envCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/ENV"/>
                </ns12:envCode>
                <ns12:appCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CLE/AppCode"/>
                </ns12:appCode>
                <ns12:interfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </ns12:interfaceCode>
                <ns12:hostName>
                    <xsl:value-of select="BW:getHostName()"/>
                </ns12:hostName>
                <ns12:timeStamp>
                    <xsl:value-of select="current-dateTime()"/>
                </ns12:timeStamp>
                <ns12:message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </ns12:message>
                <ns12:payload>
                    <xsl:value-of select="tib:render-xml($Start/root/pfx3:CreditCardAuthorizationRequest)"/>
                </ns12:payload>
                <ns12:ErrorLevel>
                    <ns12:errorCode>
                        <xsl:value-of select="concat($MapErrorResponse/pfx3:CreditCardAuthorizationResponse/Error/Type, $_globalVariables/ns:GlobalVariables/PaymentService/Constants/ErrorCodeSeparator,&#xA;$MapErrorResponse/pfx3:CreditCardAuthorizationResponse/Error/Detail[1])"/>
                    </ns12:errorCode>
                </ns12:ErrorLevel>
                <ns12:TransactionDetails>
                    <ns12:transactionDomain>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                    </ns12:transactionDomain>
                    <ns12:transactionType>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/CLE/TransactionType"/>
                    </ns12:transactionType>
                    <ns12:transactionID>
                        <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                    </ns12:transactionID>
                </ns12:TransactionDetails>
                <xsl:choose>
                    <xsl:when test="string-length($GetLocalToken/root/Error/Type)>0">
                        <xsl:for-each select="$GetLocalToken/root/CLEErrorReport">
                            <ns12:ErrorReportType>
                                <ns12:stackTrace>
                                    <xsl:value-of select="ns12:stackTrace"/>
                                </ns12:stackTrace>
                                <ns12:msg>
                                    <xsl:value-of select="ns12:msg"/>
                                </ns12:msg>
                                <ns12:fullClass>
                                    <xsl:value-of select="ns12:fullClass"/>
                                </ns12:fullClass>
                                <ns12:class>
                                    <xsl:value-of select="ns12:class"/>
                                </ns12:class>
                                <ns12:processStack>
                                    <xsl:value-of select="ns12:processStack"/>
                                </ns12:processStack>
                                <ns12:msgCode>
                                    <xsl:value-of select="ns12:msgCode"/>
                                </ns12:msgCode>
                                <ns12:data>
                                    <xsl:value-of select="ns12:data"/>
                                </ns12:data>
                            </ns12:ErrorReportType>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="string-length($GenMktHash/root/Error/Type)>0">
                        <xsl:for-each select="$GenMktHash/root/CLEErrorReport">
                            <ns12:ErrorReportType>
                                <ns12:stackTrace>
                                    <xsl:value-of select="ns12:stackTrace"/>
                                </ns12:stackTrace>
                                <ns12:msg>
                                    <xsl:value-of select="ns12:msg"/>
                                </ns12:msg>
                                <ns12:fullClass>
                                    <xsl:value-of select="ns12:fullClass"/>
                                </ns12:fullClass>
                                <ns12:class>
                                    <xsl:value-of select="ns12:class"/>
                                </ns12:class>
                                <ns12:processStack>
                                    <xsl:value-of select="ns12:processStack"/>
                                </ns12:processStack>
                                <ns12:msgCode>
                                    <xsl:value-of select="ns12:msgCode"/>
                                </ns12:msgCode>
                                <ns12:data>
                                    <xsl:value-of select="ns12:data"/>
                                </ns12:data>
                            </ns12:ErrorReportType>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="string-length($GenMktHash-1/root/Error/Type)>0">
                        <xsl:for-each select="$GenMktHash-1/root/CLEErrorReport">
                            <ns12:ErrorReportType>
                                <ns12:stackTrace>
                                    <xsl:value-of select="ns12:stackTrace"/>
                                </ns12:stackTrace>
                                <ns12:msg>
                                    <xsl:value-of select="ns12:msg"/>
                                </ns12:msg>
                                <ns12:fullClass>
                                    <xsl:value-of select="ns12:fullClass"/>
                                </ns12:fullClass>
                                <ns12:class>
                                    <xsl:value-of select="ns12:class"/>
                                </ns12:class>
                                <ns12:processStack>
                                    <xsl:value-of select="ns12:processStack"/>
                                </ns12:processStack>
                                <ns12:msgCode>
                                    <xsl:value-of select="ns12:msgCode"/>
                                </ns12:msgCode>
                                <ns12:data>
                                    <xsl:value-of select="ns12:data"/>
                                </ns12:data>
                            </ns12:ErrorReportType>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="$_error/ns1:ErrorReport">
                            <ns12:ErrorReportType>
                                <ns12:stackTrace>
                                    <xsl:value-of select="StackTrace"/>
                                </ns12:stackTrace>
                                <ns12:msg>
                                    <xsl:value-of select="Msg"/>
                                </ns12:msg>
                                <ns12:fullClass>
                                    <xsl:value-of select="FullClass"/>
                                </ns12:fullClass>
                                <ns12:class>
                                    <xsl:value-of select="Class"/>
                                </ns12:class>
                                <ns12:processStack>
                                    <xsl:value-of select="ProcessStack"/>
                                </ns12:processStack>
                                <xsl:if test="MsgCode">
                                    <ns12:msgCode>
                                        <xsl:value-of select="MsgCode"/>
                                    </ns12:msgCode>
                                </xsl:if>
                                <ns12:data>
                                    <xsl:value-of select="Data/*"/>
                                </ns12:data>
                            </ns12:ErrorReportType>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </ns12:ExceptionHandlerRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapErrorResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1174</pd:x>
        <pd:y>898</pd:y>
        <config>
            <element ref="pfx3:CreditCardAuthorizationResponse"/>
        </config>
        <pd:inputBindings>
            <pfx3:CreditCardAuthorizationResponse>
                <xsl:attribute name="version">
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/MessageVersion"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                    </SourceSystemIdentifier>
                    <xsl:choose>
                        <xsl:when test="string-length($Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId) > 0">
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Authorization/Constants/TransactionIdPrefix,$Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId)"/>
                            </TransactionId>
                        </xsl:when>
                        <xsl:otherwise>
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/Authorization/Constants/TransactionIdPrefix,tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV   , BW:getHostName())"/>
                            </TransactionId>
                        </xsl:otherwise>
                    </xsl:choose>
                    <TransactionTime>
                        <xsl:value-of select="current-dateTime()"/>
                    </TransactionTime>
                </SystemContext>
                <xsl:copy-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/PaymentContext"/>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$_error/ns1:ErrorReport">
                    <xsl:choose>
                        <xsl:when test="string-length($GetLocalToken/root/Error/Type)>0">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$GetLocalToken/root/Error/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$GetLocalToken/root/Error/Detail[1]"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$GetLocalToken/root/Error/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:when test="string-length($GenMktHash/root/Error/Type)>0">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$GenMktHash/root/Error/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$GenMktHash/root/Error/Detail[1]"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$GenMktHash/root/Error/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:when test="string-length($GenMktHash-1/root/Error/Type)>0">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$GenMktHash-1/root/Error/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$GenMktHash-1/root/Error/Detail[1]"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$GenMktHash-1/root/Error/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:when test="Class=$_globalVariables/ns:GlobalVariables/PaymentService/ValidationConstants/BIND_EXCEPTION_CLASS">
                            <Error>
                                <Type>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Detail"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:when>
                        <xsl:otherwise>
                            <Error>
                                <Type>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Type"/>
                                </Type>
                                <Detail>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Detail"/>
                                </Detail>
                                <ErrorMessage>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
            </pfx3:CreditCardAuthorizationResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapPaymentServiceResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1269</pd:x>
        <pd:y>377</pd:y>
        <config>
            <element ref="pfx3:CreditCardAuthorizationResponse"/>
        </config>
        <pd:inputBindings>
            <xsl:variable name="ctroutd" select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_CTROUTD) >0) &#xA; then&#xA; $ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_CTROUTD&#xA; else&#xA;  if(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CTROUTD) >0) &#xA;    then&#xA;      $ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CTROUTD&#xA;   else&#xA;   ''"/>
            <pfx3:CreditCardAuthorizationResponse>
                <xsl:attribute name="version">
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/MessageVersion"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                    </SourceSystemIdentifier>
                    <TransactionId>
                        <xsl:value-of select="concat(   $_globalVariables/ns:GlobalVariables/Authorization/Constants/TransactionIdPrefix  ,   $Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId)"/>
                    </TransactionId>
                    <TransactionTime>
                        <xsl:value-of select="current-dateTime()"/>
                    </TransactionTime>
                </SystemContext>
                <xsl:copy-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/PaymentContext"/>
                <xsl:for-each select="$Start/root/pfx3:CreditCardAuthorizationRequest/OrderContext">
                    <OrderContext>
                        <xsl:attribute name="omsOrderId">
                            <xsl:value-of select="@omsOrderId"/>
                        </xsl:attribute>
                        <OrderTime>
                            <xsl:value-of select="OrderTime"/>
                        </OrderTime>
                    </OrderContext>
                </xsl:for-each>
                <ConsumerTransactionId>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/ConsumerTransactionId"/>
                </ConsumerTransactionId>
                <xsl:if test="string-length($ctroutd) >0">
                    <ConfirmationId>
                        <xsl:value-of select="$ctroutd"/>
                    </ConfirmationId>
                </xsl:if>
                <xsl:variable name="AuthStatus" select="if (contains( $_globalVariables/ns:GlobalVariables/Authorization/PaymentGateway/SuccessResultCodes , $ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESULT_CODE)&#xA;or&#xA;(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_CTROUTD) > 0)&#xA;)&#xA;then&#xA; if(exists($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE) &#xA;and exists($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE) and &#xA;string-length($ChkWSIDecline/root/WSIDeclineStatus)>0)&#xA;then&#xA; $ChkWSIDecline/root/WSIDeclineStatus&#xA;else&#xA;   $_globalVariables/ns:GlobalVariables/Authorization/Constants/ApprovedAuthorizationStatus&#xA;else&#xA;$ProcessPaymentGatewayResponse-v5/root/AuthorizationStatus"/>
                <AuthorizationStatus>
                    <xsl:value-of select="$AuthStatus"/>
                </AuthorizationStatus>
                <xsl:if test="$AuthStatus=   $_globalVariables/ns:GlobalVariables/Authorization/Constants/ApprovedAuthorizationStatus">
                    <Authorization>
                        <xsl:variable name="var2" select="$Start/root/TenderSubType"/>
                        <xsl:variable name="expireDate" select="$GetAuthorizationValidityParams/ns3:PaymentServiceCreditAuthorizationValidity/ns3:PaymentServiceCreditAuthorizationValidity[contains(ns3:TenderSubType,$var2)]/ns3:AuthValidityInDays"/>
                        <xsl:choose>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_CODE)>0">
                                <Code>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_CODE"/>
                                </Code>
                            </xsl:when>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_AUTH_CODE)>0">
                                <Code>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_AUTH_CODE"/>
                                </Code>
                            </xsl:when>
                            <xsl:otherwise>
                                <Code>
                                    <xsl:value-of select="&quot;&quot;"/>
                                </Code>
                            </xsl:otherwise>
                        </xsl:choose>
                        <Expiration>
                            <xsl:value-of select="if(string-length($expireDate)>0)&#xA;then&#xA;tib:add-to-dateTime(current-dateTime(), 0, 0, $expireDate, 0, 0, 0)&#xA;else&#xA;tib:add-to-dateTime(current-dateTime(), 0, 0, $_globalVariables/ns:GlobalVariables/Authorization/Constants/NoOfValidDays, 0, 0, 0)"/>
                        </Expiration>
                        <CurrencyCode>
                            <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/CurrencyCode"/>
                        </CurrencyCode>
                        <xsl:choose>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_AMOUNT)>0">
                                <Amount>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_AMOUNT"/>
                                </Amount>
                            </xsl:when>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_TRANS_AMOUNT)>0">
                                <Amount>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_TRANS_AMOUNT"/>
                                </Amount>
                            </xsl:when>
                            <xsl:otherwise>
                                <Amount>
                                    <xsl:value-of select="0.00"/>
                                </Amount>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test="string-length($ctroutd) > 0">
                            <Metadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/CTROUTD"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ctroutd"/>
                            </Metadata>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TROUTD)>0">
                                <Metadata>
                                    <xsl:attribute name="type">
                                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/TROUTD"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TROUTD"/>
                                </Metadata>
                            </xsl:when>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TROUTD)>0">
                                <Metadata>
                                    <xsl:attribute name="type">
                                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/TROUTD"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TROUTD"/>
                                </Metadata>
                            </xsl:when>
                        </xsl:choose>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_RESP_CODE)>0">
                            <Metadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/AUTH_RESP_CODE"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_RESP_CODE"/>
                            </Metadata>
                        </xsl:if>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE)>0">
                            <Metadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/AVS_CODE"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE"/>
                            </Metadata>
                        </xsl:if>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE)>0">
                            <Metadata>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/CVV2_CODE"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE"/>
                            </Metadata>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_CODE)>0">
                                <Metadata>
                                    <xsl:attribute name="type">
                                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/AUTH_CODE"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_CODE"/>
                                </Metadata>
                            </xsl:when>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_AUTH_CODE)>0">
                                <Metadata>
                                    <xsl:attribute name="type">
                                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/AuthorizationMetaData/AUTH_CODE"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_AUTH_CODE"/>
                                </Metadata>
                            </xsl:when>
                        </xsl:choose>
                    </Authorization>
                </xsl:if>
                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE) >0">
                    <AddressVerificationStatusCode>
                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE"/>
                    </AddressVerificationStatusCode>
                </xsl:if>
                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE) >0">
                    <CardVerificationStatusCode>
                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE"/>
                    </CardVerificationStatusCode>
                </xsl:if>
                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_DATETIME) > 0&#xA; or &#xA;string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_TRANS_DATETIME) > 0">
                    <xsl:variable name="transDateTime" select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_DATETIME)>0)&#xA; then&#xA; $ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_DATETIME&#xA; else&#xA;$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_TRANS_DATETIME"/>
                    <TransactionMetadata>
                        <xsl:attribute name="type">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/TRANSACTION_DATE_TIME"/>
                        </xsl:attribute>
                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns:GlobalVariables/Authorization/PaymentGateway/PLCCTimeFormat, $transDateTime)"/>
                    </TransactionMetadata>
                </xsl:if>
                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESPONSE_TEXT) >0">
                    <TransactionMetadata>
                        <xsl:attribute name="type">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/RESPONSE_TXT"/>
                        </xsl:attribute>
                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESPONSE_TEXT"/>
                    </TransactionMetadata>
                </xsl:if>
                <xsl:if test="(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACCOUNT)>0) and&#xA;(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/SITE)>0) and&#xA;(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TERM)>0)">
                    <TransactionMetadata>
                        <xsl:attribute name="type">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CLIENTID"/>
                        </xsl:attribute>
                        <xsl:value-of select="concat($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACCOUNT,$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/SITE,$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TERM)"/>
                    </TransactionMetadata>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INVOICE)>0">
                        <TransactionMetadata>
                            <xsl:attribute name="type">
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/INVOICE"/>
                            </xsl:attribute>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INVOICE"/>
                        </TransactionMetadata>
                    </xsl:when>
                    <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_INVOICE)>0">
                        <TransactionMetadata>
                            <xsl:attribute name="type">
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/INVOICE"/>
                            </xsl:attribute>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_INVOICE"/>
                        </TransactionMetadata>
                    </xsl:when>
                </xsl:choose>
                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_SEQ_NUM) >0">
                    <TransactionMetadata>
                        <xsl:attribute name="type">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/TRANSACTION_SEQ_NUM"/>
                        </xsl:attribute>
                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_SEQ_NUM"/>
                    </TransactionMetadata>
                </xsl:if>
                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INTRN_SEQ_NUM)>0">
                    <TransactionMetadata>
                        <xsl:attribute name="type">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/INTERNAL_SEQ_NUM"/>
                        </xsl:attribute>
                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INTRN_SEQ_NUM"/>
                    </TransactionMetadata>
                </xsl:if>
                <xsl:if test="string-length($ChkWSIDecline/root/Rule)>0">
                    <TransactionMetadata>
                        <xsl:attribute name="type">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/WSI_RULE_ID"/>
                        </xsl:attribute>
                        <xsl:value-of select="$ChkWSIDecline/root/Rule"/>
                    </TransactionMetadata>
                </xsl:if>
                <xsl:if test="string-length($ctroutd) >0">
                    <TransactionMetadata>
                        <xsl:attribute name="type">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CTROUTD"/>
                        </xsl:attribute>
                        <xsl:value-of select="$ctroutd"/>
                    </TransactionMetadata>
                </xsl:if>
                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_PAYMENT)>0">
                    <Tender>
                        <xsl:variable name="expiryDate" select="if (string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE)>0)&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/PaymentGateway/VERIFONE/PaymentTokenExpirationDateFormat,concat($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE ,$_globalVariables/ns:GlobalVariables/PaymentService/PaymentGateway/VERIFONE/PaymentTokenExpirationTimeConstant))&#xA;else&#xA;tib:add-to-dateTime(tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenCalculatedExpirationTImeFormat,$CalculateLastDateOfMonth/root/lastDate),0, 0, $_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenExpirationPeriod, 0, 0,0)"/>
                        <Type>
                            <Code>
                                <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/Tender/Type/Code"/>
                            </Code>
                            <xsl:if test="string-length($Start/root/TenderSubType) > 0">
                                <xsl:if test="$Start/root/TenderSubType">
                                    <SubCode>
                                        <xsl:value-of select="$Start/root/TenderSubType"/>
                                    </SubCode>
                                </xsl:if>
                            </xsl:if>
                            <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PPCV)>0">
                                <xsl:variable name="ppcvVal" select="substring-before( $ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PPCV,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/PPCVValueSeperator)"/>
                                <Tag>
                                    <xsl:attribute name="type">
                                        <xsl:value-of select="$GetPaymentServicePPCVTypeValues/ns61:PaymentServicePPCVTypeValues/ns61:PaymentServicePPCVTypeValue[ns61:PPCVTypeValue  =$ppcvVal]/ns61:PPCVTagValue"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PPCV"/>
                                </Tag>
                            </xsl:if>
                        </Type>
                        <xsl:choose>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_PAYMENT)>0">
                                <Token>
                                    <xsl:attribute name="scheme">
                                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentGatewayTokenScheme,$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/EnvId)"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="isTemporary">
                                        <xsl:value-of select="false()"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="scope">
                                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenScope"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="expiration">
                                        <xsl:value-of select="$expiryDate"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_PAYMENT"/>
                                </Token>
                            </xsl:when>
                            <xsl:otherwise>
                                <Token>
                                    <xsl:attribute name="scheme">
                                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentGatewayTokenScheme,$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/EnvId)"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="isTemporary">
                                        <xsl:value-of select="false()"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="scope">
                                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/PaymentTokenScope"/>
                                    </xsl:attribute>
                                    <xsl:attribute name="expiration">
                                        <xsl:value-of select="$expiryDate"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="&quot;&quot;"/>
                                </Token>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_MATCHING)>0">
                            <Hash>
                                <xsl:attribute name="scheme">
                                    <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/MatchingTokenScheme,$_globalVariables/ns:GlobalVariables/PaymentService/TokenConstants/EnvId)"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_MATCHING"/>
                            </Hash>
                        </xsl:if>
                        <xsl:if test="string-length($GenMktHash-1/root/TokenDetails/WSIMatchingTokenValue)>0">
                            <Hash>
                                <xsl:attribute name="scheme">
                                    <xsl:value-of select="$GenMktHash-1/root/TokenDetails/WSIMatchingTokenScheme"/>
                                </xsl:attribute>
                                <xsl:value-of select="$GenMktHash-1/root/TokenDetails/WSIMatchingTokenValue"/>
                            </Hash>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_ACCT_NUM)>0">
                                <MaskedAccountNumber>
                                    <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS/DUP_ACCT_NUM"/>
                                </MaskedAccountNumber>
                            </xsl:when>
                            <xsl:when test="string-length($Start/root/PAN)>0">
                                <MaskedAccountNumber>
                                    <xsl:value-of select="concat( tib:pad-and-limit(tib:left($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayFirst),(string-length($Start/root/PAN)-$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast),$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountMaskCharecter), tib:right($Start/root/PAN,$_globalVariables/ns:GlobalVariables/PaymentService/Constants/MaskedAccountDisplayLast))"/>
                                </MaskedAccountNumber>
                            </xsl:when>
                            <xsl:otherwise/>
                        </xsl:choose>
                    </Tender>
                </xsl:if>
            </pfx3:CreditCardAuthorizationResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>773</pd:x>
        <pd:y>369</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ProcessPaymentGatewayResponse-v5">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>499</pd:x>
        <pd:y>366</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/ProcessPaymentGatewayResponse-PLCC.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <OperationScope>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/BWTransformation/OperationScope"/>
                </OperationScope>
                <ns7:UGPRESPONSE>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/@RSA">
                        <xsl:attribute name="RSA">
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/@RSA"/>
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/@RSV">
                        <xsl:attribute name="RSV">
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/@RSV"/>
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACCOUNT">
                        <ACCOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACCOUNT"/>
                        </ACCOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/SITE">
                        <SITE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/SITE"/>
                        </SITE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TERM">
                        <TERM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TERM"/>
                        </TERM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/COMMAND">
                        <COMMAND>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/COMMAND"/>
                        </COMMAND>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESULT_CODE">
                        <RESULT_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESULT_CODE"/>
                        </RESULT_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESPONSE_TEXT">
                        <RESPONSE_TEXT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESPONSE_TEXT"/>
                        </RESPONSE_TEXT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESULT">
                        <RESULT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESULT"/>
                        </RESULT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_MEDIA">
                        <PAYMENT_MEDIA>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_MEDIA"/>
                        </PAYMENT_MEDIA>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_TYPE">
                        <PAYMENT_TYPE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PAYMENT_TYPE"/>
                        </PAYMENT_TYPE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CTROUTD">
                        <CTROUTD>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CTROUTD"/>
                        </CTROUTD>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TA_TOKEN">
                        <TA_TOKEN>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TA_TOKEN"/>
                        </TA_TOKEN>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_DATETIME">
                        <TRANS_DATETIME>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_DATETIME"/>
                        </TRANS_DATETIME>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/LPTOKEN">
                        <LPTOKEN>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/LPTOKEN"/>
                        </LPTOKEN>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PURCHASE_APR">
                        <PURCHASE_APR>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PURCHASE_APR"/>
                        </PURCHASE_APR>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACTION_CODE">
                        <ACTION_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACTION_CODE"/>
                        </ACTION_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/SVC_PHONE">
                        <SVC_PHONE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/SVC_PHONE"/>
                        </SVC_PHONE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/STATUS_FLAG">
                        <STATUS_FLAG>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/STATUS_FLAG"/>
                        </STATUS_FLAG>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/APR_TYPE">
                        <APR_TYPE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/APR_TYPE"/>
                        </APR_TYPE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACCT_NUM">
                        <ACCT_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ACCT_NUM"/>
                        </ACCT_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRACE_CODE">
                        <TRACE_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRACE_CODE"/>
                        </TRACE_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE">
                        <AVS_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE"/>
                        </AVS_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE">
                        <CVV2_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE"/>
                        </CVV2_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CMRCL_FLAG">
                        <CMRCL_FLAG>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CMRCL_FLAG"/>
                        </CMRCL_FLAG>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/BATCH_NUM">
                        <BATCH_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/BATCH_NUM"/>
                        </BATCH_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVAIL_BALANCE">
                        <AVAIL_BALANCE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVAIL_BALANCE"/>
                        </AVAIL_BALANCE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_AMOUNT">
                        <TRANS_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_AMOUNT"/>
                        </TRANS_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PPCV">
                        <PPCV>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PPCV"/>
                        </PPCV>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PPCV">
                        <AUTH_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PPCV"/>
                        </AUTH_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ORIG_TRANS_AMOUNT">
                        <ORIG_TRANS_AMOUNT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/ORIG_TRANS_AMOUNT"/>
                        </ORIG_TRANS_AMOUNT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DIFF_AMOUNT_DUE">
                        <DIFF_AMOUNT_DUE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DIFF_AMOUNT_DUE"/>
                        </DIFF_AMOUNT_DUE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_CODE">
                        <AUTH_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_CODE"/>
                        </AUTH_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INTRN_SEQ_NUM">
                        <INTRN_SEQ_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INTRN_SEQ_NUM"/>
                        </INTRN_SEQ_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INVOICE">
                        <INVOICE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/INVOICE"/>
                        </INVOICE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PY_RESP_CODE">
                        <PY_RESP_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/PY_RESP_CODE"/>
                        </PY_RESP_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/REFERENCE">
                        <REFERENCE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/REFERENCE"/>
                        </REFERENCE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESPONSE_CODE">
                        <RESPONSE_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/RESPONSE_CODE"/>
                        </RESPONSE_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TERMINATION_STATUS">
                        <TERMINATION_STATUS>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TERMINATION_STATUS"/>
                        </TERMINATION_STATUS>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_SEQ_NUM">
                        <TRANS_SEQ_NUM>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TRANS_SEQ_NUM"/>
                        </TRANS_SEQ_NUM>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TROUTD">
                        <TROUTD>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TROUTD"/>
                        </TROUTD>
                    </xsl:if>
                    <AUTH_RESP_CODE>
                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AUTH_RESP_CODE"/>
                    </AUTH_RESP_CODE>
                    <xsl:copy-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TAGS"/>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/STATUS_CODE">
                        <STATUS_CODE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/STATUS_CODE"/>
                        </STATUS_CODE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/BATCH_TRACE_ID">
                        <BATCH_TRACE_ID>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/BATCH_TRACE_ID"/>
                        </BATCH_TRACE_ID>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_PROCESS">
                        <TKN_PROCESS>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_PROCESS"/>
                        </TKN_PROCESS>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_USED">
                        <TKN_USED>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_USED"/>
                        </TKN_USED>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_MATCHING">
                        <TKN_MATCHING>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_MATCHING"/>
                        </TKN_MATCHING>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_PAYMENT">
                        <TKN_PAYMENT>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_PAYMENT"/>
                        </TKN_PAYMENT>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE">
                        <TKN_EXPDATE>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE"/>
                        </TKN_EXPDATE>
                    </xsl:if>
                    <xsl:if test="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TROUTD">
                        <DUP_TROUTD>
                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/DUP_TROUTD"/>
                        </DUP_TROUTD>
                    </xsl:if>
                </ns7:UGPRESPONSE>
                <InterfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </InterfaceCode>
                <TransactionType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/CLE/TransactionType"/>
                </TransactionType>
                <TransactionId>
                    <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                </TransactionId>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ValidatePaymentGatewayResponse-v1">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>340</pd:x>
        <pd:y>49</pd:y>
        <config>
            <processName>/BusinessProcesses/CreditAuthorization/ResponseProcessors/ValidatePaymentGatewayResponse-PLCC.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <paymentgatewayresponse>
                    <xsl:value-of select="$Start/root/paymentgatewayresponse"/>
                </paymentgatewayresponse>
                <transactionid>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/SystemContext/TransactionId"/>
                </transactionid>
                <xsl:copy-of select="$Start/root/pfx3:CreditCardAuthorizationRequest"/>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null-1">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>495</pd:x>
        <pd:y>566</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetLocalToken">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>724</pd:x>
        <pd:y>632</pd:y>
        <config>
            <processName>/CommonProcesses/CryptoProcesses/GetLocalToken.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <PAN>
                    <xsl:value-of select="$Start/root/PAN"/>
                </PAN>
                <xsl:if test="string-length($Start/root/pfx3:CreditCardAuthorizationRequest/CardMetadata/CardExpiration/Month)>0">
                    <xsl:if test="$Start/root/pfx3:CreditCardAuthorizationRequest/CardMetadata/CardExpiration/Month">
                        <ExpiryMonth>
                            <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/CardMetadata/CardExpiration/Month"/>
                        </ExpiryMonth>
                    </xsl:if>
                </xsl:if>
                <xsl:if test="string-length($Start/root/pfx3:CreditCardAuthorizationRequest/CardMetadata/CardExpiration/Year)>0">
                    <xsl:if test="$Start/root/pfx3:CreditCardAuthorizationRequest/CardMetadata/CardExpiration/Year">
                        <ExpiryYear>
                            <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/CardMetadata/CardExpiration/Year"/>
                        </ExpiryYear>
                    </xsl:if>
                </xsl:if>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>724</pd:x>
        <pd:y>741</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx6:ActivityInput/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null-2">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>336</pd:x>
        <pd:y>793</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GenMktHash">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>928</pd:x>
        <pd:y>695</pd:y>
        <config>
            <processName>/CommonProcesses/CryptoProcesses/GetWSIMatchingToken.process</processName>
            <processNameXPath/>
        </config>
        <pd:inputBindings>
            <root>
                <PAN>
                    <xsl:value-of select="$Start/root/PAN"/>
                </PAN>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenError-1">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>1156</pd:x>
        <pd:y>740</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx6:ActivityInput/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenMktHash-1">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>774</pd:x>
        <pd:y>131</pd:y>
        <config>
            <processName>/CommonProcesses/CryptoProcesses/GetWSIMatchingToken.process</processName>
            <processNameXPath/>
        </config>
        <pd:inputBindings>
            <root>
                <PAN>
                    <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/root/PAN"/>
                </PAN>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenError-1-1">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>612</pd:x>
        <pd:y>134</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx6:ActivityInput/>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="CalculateLastDateOfMonth">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1113</pd:x>
        <pd:y>373</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/CalculateLastDateOfMonth.process</processName>
        </config>
        <pd:inputBindings>
            <Date>
                <month>
                    <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE)>0)&#xA; then &#xA;tib:get-month-from-date(tib:parse-date('MMddyyyy',$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE))&#xA;else&#xA;tib:get-month-from-date(current-date())"/>
                </month>
                <year>
                    <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE)>0)&#xA; then &#xA;tib:get-year-from-date(tib:parse-date('MMddyyyy',$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/TKN_EXPDATE))&#xA;else&#xA;tib:get-year-from-date(current-date())"/>
                </year>
            </Date>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ChkWSIDecline">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1116</pd:x>
        <pd:y>131</pd:y>
        <config>
            <processName>/BusinessProcesses/CreditAuthorization/ResponseProcessors/CheckWSIDeclineRules.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <AVSCode>
                    <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE)>0)&#xA; then&#xA;$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/AVS_CODE&#xA; else&#xA;&quot;&quot;"/>
                </AVSCode>
                <CVVCode>
                    <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE)>0)&#xA; then&#xA;$ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE&#xA; else&#xA;&quot;&quot;"/>
                </CVVCode>
                <Concept>
                    <xsl:value-of select="$Start/root/pfx3:CreditCardAuthorizationRequest/PaymentContext/Concept"/>
                </Concept>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null-3">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>945</pd:x>
        <pd:y>132</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetPaymentServicePPCVTypeValues">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>1192</pd:x>
        <pd:y>456</pd:y>
        <config>
            <variableConfig>/SharedResources/SharedVariables/SV-PaymentServicePPCVTypeValues.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="NotifySupport">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>964</pd:x>
        <pd:y>51</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/NotifySupport.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <InterfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </InterfaceCode>
                <ExceptionCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/NotificationErrorCodes/PAYMENT_GATEWAY_RESPONSE_VALIDATION_ERROR"/>
                </ExceptionCode>
                <ErrorMessage>
                    <xsl:value-of select="concat($ValidatePaymentGatewayResponse-v1/root/pfx3:CreditCardAuthorizationResponse/Error/Detail[1],  $_globalVariables/ns:GlobalVariables/PaymentService/CLE/ErrorMessageSeparator   ,  $ValidatePaymentGatewayResponse-v1/root/pfx3:CreditCardAuthorizationResponse/Error/ErrorMessage)"/>
                </ErrorMessage>
                <TransactionType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Authorization/CLE/TransactionType"/>
                </TransactionType>
                <TransactionId>
                    <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                </TransactionId>
                <Payload>
                    <xsl:value-of select="tib:render-xml($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE)"/>
                </Payload>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>MapPaymentServiceResponse</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidatePaymentGatewayResponse-v1</pd:from>
        <pd:to>ProcessPaymentGatewayResponse-v5</pd:to>
        <pd:xpathDescription>Valid Response?</pd:xpathDescription>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>MapErrorResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogRequestValidationExceptionRequest</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapErrorResponse</pd:from>
        <pd:to>LogRequestValidationExceptionRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidatePaymentGatewayResponse-v1</pd:from>
        <pd:to>NotifySupport</pd:to>
        <pd:xpathDescription>ValidationError</pd:xpathDescription>
        <pd:lineType>Straight</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ValidatePaymentGatewayResponse-v1/root/pfx3:CreditCardAuthorizationResponse) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetCLEParams</pd:from>
        <pd:to>ValidatePaymentGatewayResponse-v1</pd:to>
        <pd:xpathDescription>OnGatewayCallSuccess</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/root/paymentgatewayresponse)&gt;0 and string-length($Start/root/Error/Type)=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>ProcessPaymentGatewayResponse-v5</pd:from>
        <pd:to>Null-1</pd:to>
        <pd:xpathDescription>Error Exists</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ProcessPaymentGatewayResponse-v5/root/Error/Type) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAuthorizationValidityParams</pd:from>
        <pd:to>Null-3</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>GetAuthorizationValidityParams</pd:to>
        <pd:xpathDescription>Approved</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$ProcessPaymentGatewayResponse-v5/root/AuthorizationStatus=$_globalVariables/ns:GlobalVariables/Authorization/Constants/ApprovedAuthorizationStatus</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>ProcessPaymentGatewayResponse-v5</pd:from>
        <pd:to>Null</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>CalculateLastDateOfMonth</pd:to>
        <pd:xpathDescription>Declined</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>GetLocalToken</pd:to>
        <pd:xpathDescription>Remote-Error with PAN</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/root/PAN)&gt;0
  and
($ProcessPaymentGatewayResponse-v5/root/provideTokenOnError="true"
 or 
string-length($ValidatePaymentGatewayResponse-v1/root/pfx3:CreditCardAuthorizationResponse) &gt;0)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetLocalToken</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GetLocalToken/root/Error/Type) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetCLEParams</pd:from>
        <pd:to>Null-2</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-2</pd:from>
        <pd:to>GetLocalToken</pd:to>
        <pd:xpathDescription>PAN in Hand</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Start/root/PAN) &gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetLocalToken</pd:from>
        <pd:to>GenMktHash</pd:to>
        <pd:xpathDescription>Gen Mkt Hash</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$_globalVariables/ns:GlobalVariables/PaymentService/Settings/GenerateWSIMarketingHash=$_globalVariables/ns:GlobalVariables/PaymentService/Constants/BooleanSuccess</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash</pd:from>
        <pd:to>GenError-1</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GenMktHash/root/Error/Type)&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-2</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash-1</pd:from>
        <pd:to>GenError-1-1</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GenMktHash-1/root/Error/Type)&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAuthorizationValidityParams</pd:from>
        <pd:to>GenMktHash-1</pd:to>
        <pd:xpathDescription>PAN in hand</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$_globalVariables/ns:GlobalVariables/PaymentService/Settings/GenerateWSIMarketingHash=$_globalVariables/ns:GlobalVariables/PaymentService/Constants/BooleanSuccess
and
string-length($Start/root/PAN)&gt;0
and
$ProcessPaymentGatewayResponse-v5/root/AuthorizationStatus=$_globalVariables/ns:GlobalVariables/Authorization/Constants/ApprovedAuthorizationStatus</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GenMktHash-1</pd:from>
        <pd:to>Null-3</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CalculateLastDateOfMonth</pd:from>
        <pd:to>GetPaymentServicePPCVTypeValues</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>GetCLEParams</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ChkWSIDecline</pd:from>
        <pd:to>CalculateLastDateOfMonth</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-3</pd:from>
        <pd:to>ChkWSIDecline</pd:to>
        <pd:xpathDescription>CVN exists</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ValidatePaymentGatewayResponse-v1/root/ns6:UGPRESPONSE/CVV2_CODE) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-3</pd:from>
        <pd:to>CalculateLastDateOfMonth</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPaymentServicePPCVTypeValues</pd:from>
        <pd:to>MapPaymentServiceResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetLocalToken</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>NotifySupport</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidatePaymentGatewayResponse-v1</pd:from>
        <pd:to>Null-1</pd:to>
        <pd:xpathDescription>Validation Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ValidatePaymentGatewayResponse-v1/root/pfx3:CreditCardAuthorizationResponse)&gt; 0</pd:xpath>
    </pd:transition>
    <pd:label>
        <pd:name>Label</pd:name>
        <pd:description>Map Payment Gateway Response to Payment Service Response Mapping here 
</pd:description>
        <pd:x>1539</pd:x>
        <pd:y>359</pd:y>
        <pd:width>262</pd:width>
        <pd:height>61</pd:height>
        <pd:fontColor>-16777216</pd:fontColor>
        <pd:color>-26266</pd:color>
        <pd:type>solid</pd:type>
        <pd:thickness>0</pd:thickness>
        <pd:fade>true</pd:fade>
    </pd:label>
</pd:ProcessDefinition>