<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx="http://www.tibco.com/schemas/Payment Services/CreditAuthResponseSchema.xsd" xmlns:ns="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns12="http://www.ultimosoft.com/CLEH/ExceptionHandler.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns3="http://www.wsgc.com/schemas/common/PaymentGatewaySVCStatusCodes.xsd" xmlns:ns4="http://www.services.wsgc.com/2014/Payment/Verfione/UGP/Gift/BalanceInquiryResponse" xmlns:pfx2="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XMLSchemas/Verifone/CreditPreSvcBalanceInquiryResponse.xsd" xmlns:ns5="http://www.wsgc.com/schemas/common/PaymentServiceSVCCardClasss.xsd" xmlns:pfx3="http://services.wsgc.com/2014/Payment" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns6="http://www.services.wsgc.com/2014/Payment/Verfione/UGP/Gift/Response" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions">
    <xsd:import namespace="http://www.tibco.com/schemas/Payment Services/CreditAuthResponseSchema.xsd" schemaLocation="/CreditAuthResponse Schema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XMLSchemas/Verifone/CreditPreSvcBalanceInquiryResponse.xsd" schemaLocation="/SharedResources/XMLSchemas/Verifone/CreditPreSvcBalanceInquiryResponse.xsd"/>
    <xsd:import namespace="http://services.wsgc.com/2014/Payment" schemaLocation="/SharedResources/XMLSchemas/2014/Payment/svc-balance.xsd"/>
    <pd:name>BusinessProcesses/SvcBalanceInquiry/ResponseProcessors/MapPaymentServiceResponse.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="paymentgatewayresponse" type="xsd:string"/>
                    <xsd:element ref="pfx3:SvcBalanceInquiryRequest"/>
                    <xsd:element name="EncryptedPIN" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>59</pd:startX>
    <pd:startY>200</pd:startY>
    <pd:returnBindings>
        <xsl:choose>
            <xsl:when test="string-length($MapErrorResponse/pfx3:SvcBalanceInquiryResponse/@version) > 0">
                <xsl:for-each select="$MapErrorResponse/pfx3:SvcBalanceInquiryResponse">
                    <pfx3:SvcBalanceInquiryResponse>
                        <xsl:attribute name="version">
                            <xsl:value-of select="@version"/>
                        </xsl:attribute>
                        <xsl:for-each select="SystemContext">
                            <SystemContext>
                                <EnvironmentIdentifier>
                                    <xsl:value-of select="EnvironmentIdentifier"/>
                                </EnvironmentIdentifier>
                                <RegionIdentifier>
                                    <xsl:value-of select="RegionIdentifier"/>
                                </RegionIdentifier>
                                <SourceSystemIdentifier>
                                    <xsl:value-of select="SourceSystemIdentifier"/>
                                </SourceSystemIdentifier>
                                <TransactionId>
                                    <xsl:value-of select="TransactionId"/>
                                </TransactionId>
                                <TransactionTime>
                                    <xsl:value-of select="TransactionTime"/>
                                </TransactionTime>
                                <xsl:if test="RoutingSpecification">
                                    <RoutingSpecification>
                                        <xsl:value-of select="RoutingSpecification"/>
                                    </RoutingSpecification>
                                </xsl:if>
                                <xsl:if test="TestingMode">
                                    <TestingMode>
                                        <xsl:value-of select="TestingMode"/>
                                    </TestingMode>
                                </xsl:if>
                            </SystemContext>
                        </xsl:for-each>
                        <xsl:for-each select="PaymentContext">
                            <PaymentContext>
                                <Concept>
                                    <xsl:value-of select="Concept"/>
                                </Concept>
                                <Channel>
                                    <xsl:value-of select="Channel"/>
                                </Channel>
                            </PaymentContext>
                        </xsl:for-each>
                        <xsl:for-each select="Error">
                            <Error>
                                <Type>
                                    <xsl:value-of select="Type"/>
                                </Type>
                                <xsl:if test="string-length(Detail[1])>0">
                                    <xsl:for-each select="Detail">
                                        <Detail>
                                            <xsl:value-of select="."/>
                                        </Detail>
                                    </xsl:for-each>
                                </xsl:if>
                                <ErrorMessage>
                                    <xsl:value-of select="ErrorMessage"/>
                                </ErrorMessage>
                            </Error>
                        </xsl:for-each>
                    </pfx3:SvcBalanceInquiryResponse>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:copy-of select="$MapPaymentServiceResponse/pfx3:SvcBalanceInquiryResponse"/>
            </xsl:otherwise>
        </xsl:choose>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx3:SvcBalanceInquiryResponse"/>
    <pd:endX>899</pd:endX>
    <pd:endY>203</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1414172991752</pd:targetNamespace>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>394</pd:x>
        <pd:y>370</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetCLEParams">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>229</pd:x>
        <pd:y>200</pd:y>
        <config>
            <variableConfig>/BusinessProcesses/SvcBalanceInquiry/CLEParams.jobsharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="LogRequestValidationExceptionRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>902</pd:x>
        <pd:y>370</pd:y>
        <config>
            <processName>/CommonProcesses/CLEClientStub/SendExceptionRequest.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns12:ExceptionHandlerRequest>
                <ns12:envCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/ENV"/>
                </ns12:envCode>
                <ns12:appCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CLE/AppCode"/>
                </ns12:appCode>
                <ns12:interfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </ns12:interfaceCode>
                <ns12:hostName>
                    <xsl:value-of select="BW:getHostName()"/>
                </ns12:hostName>
                <ns12:timeStamp>
                    <xsl:value-of select="current-dateTime()"/>
                </ns12:timeStamp>
                <ns12:message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </ns12:message>
                <ns12:payload>
                    <xsl:value-of select="tib:render-xml($Start/root/pfx3:SvcBalanceInquiryRequest)"/>
                </ns12:payload>
                <ns12:ErrorLevel>
                    <ns12:errorCode>
                        <xsl:value-of select="concat($MapErrorResponse/pfx3:SvcBalanceInquiryResponse/Error/Type, $_globalVariables/ns:GlobalVariables/PaymentService/Constants/ErrorCodeSeparator,&#xA;$MapErrorResponse/pfx3:SvcBalanceInquiryResponse/Error/Detail[1])"/>
                    </ns12:errorCode>
                </ns12:ErrorLevel>
                <ns12:TransactionDetails>
                    <ns12:transactionDomain>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                    </ns12:transactionDomain>
                    <ns12:transactionType>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/CLE/TransactionType"/>
                    </ns12:transactionType>
                    <ns12:transactionID>
                        <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                    </ns12:transactionID>
                </ns12:TransactionDetails>
                <xsl:for-each select="$_error/ns1:ErrorReport">
                    <ns12:ErrorReportType>
                        <ns12:stackTrace>
                            <xsl:value-of select="StackTrace"/>
                        </ns12:stackTrace>
                        <ns12:msg>
                            <xsl:value-of select="Msg"/>
                        </ns12:msg>
                        <ns12:fullClass>
                            <xsl:value-of select="FullClass"/>
                        </ns12:fullClass>
                        <ns12:class>
                            <xsl:value-of select="Class"/>
                        </ns12:class>
                        <ns12:processStack>
                            <xsl:value-of select="ProcessStack"/>
                        </ns12:processStack>
                        <xsl:if test="MsgCode">
                            <ns12:msgCode>
                                <xsl:value-of select="MsgCode"/>
                            </ns12:msgCode>
                        </xsl:if>
                        <ns12:data>
                            <xsl:value-of select="Data/*"/>
                        </ns12:data>
                    </ns12:ErrorReportType>
                </xsl:for-each>
            </ns12:ExceptionHandlerRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapErrorResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>674</pd:x>
        <pd:y>370</pd:y>
        <config>
            <element ref="pfx3:SvcBalanceInquiryResponse"/>
        </config>
        <pd:inputBindings>
            <pfx3:SvcBalanceInquiryResponse>
                <xsl:attribute name="version">
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/MessageVersion"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                    </SourceSystemIdentifier>
                    <xsl:choose>
                        <xsl:when test="string-length($Start/root/pfx3:SvcBalanceInquiryRequest/SystemContext/TransactionId)>0">
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/Constants/TransactionIdPrefix,$Start/root/pfx3:SvcBalanceInquiryRequest/SystemContext/TransactionId)"/>
                            </TransactionId>
                        </xsl:when>
                        <xsl:otherwise>
                            <TransactionId>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/Constants/TransactionIdPrefix,concat(tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV   , BW:getHostName()))"/>
                            </TransactionId>
                        </xsl:otherwise>
                    </xsl:choose>
                    <TransactionTime>
                        <xsl:value-of select="current-dateTime()"/>
                    </TransactionTime>
                </SystemContext>
                <xsl:copy-of select="$Start/root/pfx3:SvcBalanceInquiryRequest/PaymentContext"/>
                <xsl:choose>
                    <xsl:when test="$_error/ns1:ErrorReport/Class=$_globalVariables/ns:GlobalVariables/PaymentService/ValidationConstants/BIND_EXCEPTION_CLASS">
                        <Error>
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Type"/>
                            </Type>
                            <Detail>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Detail"/>
                            </Detail>
                            <ErrorMessage>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/ErrorMessage"/>
                            </ErrorMessage>
                        </Error>
                    </xsl:when>
                    <xsl:otherwise>
                        <Error>
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Type"/>
                            </Type>
                            <Detail>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Detail"/>
                            </Detail>
                            <ErrorMessage>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/ErrorMessage"/>
                            </ErrorMessage>
                        </Error>
                    </xsl:otherwise>
                </xsl:choose>
            </pfx3:SvcBalanceInquiryResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapPaymentServiceResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>712</pd:x>
        <pd:y>204</pd:y>
        <config>
            <element ref="pfx3:SvcBalanceInquiryResponse"/>
        </config>
        <pd:inputBindings>
            <xsl:choose>
                <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/pfx3:SvcBalanceInquiryResponse)>0">
                    <xsl:copy-of select="$ValidatePaymentGatewayResponse-v1/root/pfx3:SvcBalanceInquiryResponse"/>
                </xsl:when>
                <xsl:otherwise>
                    <pfx3:SvcBalanceInquiryResponse>
                        <xsl:attribute name="version">
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/MessageVersion"/>
                        </xsl:attribute>
                        <SystemContext>
                            <EnvironmentIdentifier>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                            </EnvironmentIdentifier>
                            <RegionIdentifier>
                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                            </RegionIdentifier>
                            <SourceSystemIdentifier>
                                <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix, BW:getHostName())"/>
                            </SourceSystemIdentifier>
                            <xsl:choose>
                                <xsl:when test="string-length($Start/root/pfx3:SvcBalanceInquiryRequest/SystemContext/TransactionId)>0">
                                    <TransactionId>
                                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/Constants/TransactionIdPrefix,$Start/root/pfx3:SvcBalanceInquiryRequest/SystemContext/TransactionId)"/>
                                    </TransactionId>
                                </xsl:when>
                                <xsl:otherwise>
                                    <TransactionId>
                                        <xsl:value-of select="concat($_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/Constants/TransactionIdPrefix,concat(tib:format-dateTime($_globalVariables/ns:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns:GlobalVariables/ENV   , BW:getHostName()))"/>
                                    </TransactionId>
                                </xsl:otherwise>
                            </xsl:choose>
                            <TransactionTime>
                                <xsl:value-of select="current-dateTime()"/>
                            </TransactionTime>
                        </SystemContext>
                        <xsl:copy-of select="$Start/root/pfx3:SvcBalanceInquiryRequest/PaymentContext"/>
                        <xsl:choose>
                            <xsl:when test="$ProcessPaymentGatewayResponse/root/Success=&quot;true&quot;">
                                <xsl:for-each select="$Start/root/pfx3:SvcBalanceInquiryRequest/OrderContext">
                                    <OrderContext>
                                        <xsl:attribute name="omsOrderId">
                                            <xsl:value-of select="@omsOrderId"/>
                                        </xsl:attribute>
                                        <OrderTime>
                                            <xsl:value-of select="OrderTime"/>
                                        </OrderTime>
                                    </OrderContext>
                                </xsl:for-each>
                                <Authorization>
                                    <Code>
                                        <xsl:value-of select="if((string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/AUTH_CODE))>0)&#xA;then&#xA;$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/AUTH_CODE&#xA;else&#xA;if((string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/DUP_AUTH_CODE))>0)&#xA;then&#xA;$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/DUP_AUTH_CODE&#xA;else&#xA;&quot;&quot;"/>
                                    </Code>
                                    <Expiration>
                                        <xsl:value-of select="tib:add-to-dateTime(current-dateTime(),0,0, $_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/BWTransformation/EXPIRY,0,0,0)"/>
                                    </Expiration>
                                    <CurrencyCode>
                                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/CurrencyCode"/>
                                    </CurrencyCode>
                                    <Amount>
                                        <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/AMOUNT_BALANCE)>0)&#xA; then&#xA;tib:round-fraction(number($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/AMOUNT_BALANCE),2)&#xA; else&#xA; 0.00"/>
                                    </Amount>
                                    <xsl:if test="string-length($Start/root/EncryptedPIN) > 0">
                                        <xsl:if test="$Start/root/EncryptedPIN">
                                            <Metadata>
                                                <xsl:attribute name="type">
                                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/AuthorizationMetaData/EAN"/>
                                                </xsl:attribute>
                                                <xsl:value-of select="$Start/root/EncryptedPIN"/>
                                            </Metadata>
                                        </xsl:if>
                                    </xsl:if>
                                </Authorization>
                                <IsPinVerified>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/BWTransformation/IsPinVerified"/>
                                </IsPinVerified>
                                <CurrencyCode>
                                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/CurrencyCode"/>
                                </CurrencyCode>
                                <BalanceAmount>
                                    <xsl:value-of select="if(string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/AMOUNT_BALANCE)>0)&#xA; then&#xA;tib:round-fraction(number($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/AMOUNT_BALANCE),2)&#xA; else&#xA; 0.00"/>
                                </BalanceAmount>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/TRANS_DATETIME) > 0&#xA; or &#xA;string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/DUP_TRANS_DATE) > 0">
                                    <xsl:variable name="transDateTime" select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/TRANS_DATETIME&#xA;"/>
                                    <TransactionMetadata>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/TRANSACTION_DATE_TIME"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/PaymentGateway/TimeFormat, $transDateTime)"/>
                                    </TransactionMetadata>
                                </xsl:if>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/RESPONSE_TEXT)>0">
                                    <TransactionMetadata>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/RESPONSE_TXT"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/RESPONSE_TEXT"/>
                                    </TransactionMetadata>
                                </xsl:if>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/ACCOUNT)>0 and&#xA;string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/SITE)>0 and&#xA;string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/TERM)>0">
                                    <TransactionMetadata>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CLIENTID"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="concat($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/ACCOUNT,$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/SITE,$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/TERM)"/>
                                    </TransactionMetadata>
                                </xsl:if>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/INVOICE)>0">
                                    <TransactionMetadata>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/INVOICE"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/INVOICE"/>
                                    </TransactionMetadata>
                                </xsl:if>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/TRANS_SEQ_NUM)>0">
                                    <TransactionMetadata>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/TRANSACTION_SEQ_NUM"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/TRANS_SEQ_NUM"/>
                                    </TransactionMetadata>
                                </xsl:if>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/INTRN_SEQ_NUM)>0">
                                    <TransactionMetadata>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/INTERNAL_SEQ_NUM"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/INTRN_SEQ_NUM"/>
                                    </TransactionMetadata>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/CTROUTD)>0">
                                        <TransactionMetadata>
                                            <xsl:attribute name="type">
                                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CTROUTD"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/CTROUTD"/>
                                        </TransactionMetadata>
                                    </xsl:when>
                                    <xsl:when test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/DUP_CTROUTD)>0">
                                        <TransactionMetadata>
                                            <xsl:attribute name="type">
                                                <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CTROUTD"/>
                                            </xsl:attribute>
                                            <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/DUP_CTROUTD"/>
                                        </TransactionMetadata>
                                    </xsl:when>
                                </xsl:choose>
                                <xsl:if test="string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/CARD_CLASS)>0">
                                    <TransactionMetadata>
                                        <xsl:attribute name="type">
                                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/Constants/TransactionMetaData/CARD_CLASS"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/CARD_CLASS"/>
                                    </TransactionMetadata>
                                </xsl:if>
                                <Tender>
                                    <Type>
                                        <Code>
                                            <xsl:value-of select="$Start/root/pfx3:SvcBalanceInquiryRequest/Tender/Type/Code"/>
                                        </Code>
                                        <xsl:variable name="var4" select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/CARD_CLASS"/>
                                        <xsl:if test="string-length($GetSubCodeForCardClass/ns5:PaymentServiceSVCCardClasss/ns5:PaymentServiceSVCCardClass[ns5:CardClass=$var4]/ns5:SVCSubType)>0">
                                            <xsl:variable name="var3" select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/CARD_CLASS"/>
                                            <SubCode>
                                                <xsl:value-of select="$GetSubCodeForCardClass/ns5:PaymentServiceSVCCardClasss/ns5:PaymentServiceSVCCardClass[ns5:CardClass=$var3]/ns5:SVCSubType"/>
                                            </SubCode>
                                        </xsl:if>
                                        <xsl:copy-of select="$Start/root/pfx3:SvcBalanceInquiryRequest/Tender/Type/Tag"/>
                                    </Type>
                                    <AccountNumber>
                                        <xsl:value-of select="if((string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/ACCT_NUM))>0)&#xA;then&#xA;$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/ACCT_NUM&#xA;else&#xA;if((string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/DUP_ACCT_NUM))>0)&#xA;then&#xA;$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE/DUP_ACCT_NUM&#xA;else&#xA;$Start/root/pfx3:SvcBalanceInquiryRequest/Tender/AccountNumber"/>
                                    </AccountNumber>
                                </Tender>
                            </xsl:when>
                            <xsl:otherwise>
                                <Error>
                                    <Type>
                                        <xsl:value-of select="$ProcessPaymentGatewayResponse/root/Error/Type"/>
                                    </Type>
                                    <xsl:if test="string-length($ProcessPaymentGatewayResponse/root/Error/Detail[1])>0">
                                        <xsl:for-each select="$ProcessPaymentGatewayResponse/root/Error/Detail">
                                            <Detail>
                                                <xsl:value-of select="."/>
                                            </Detail>
                                        </xsl:for-each>
                                    </xsl:if>
                                    <ErrorMessage>
                                        <xsl:value-of select="$ProcessPaymentGatewayResponse/root/Error/ErrorMessage"/>
                                    </ErrorMessage>
                                </Error>
                            </xsl:otherwise>
                        </xsl:choose>
                    </pfx3:SvcBalanceInquiryResponse>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ProcessPaymentGatewayResponse">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>385</pd:x>
        <pd:y>61</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/ProcessPaymentGatewayResponse-SVC.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:for-each select="$ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE">
                    <ns6:UGPRESPONSE>
                        <xsl:if test="@RSA">
                            <xsl:attribute name="RSA">
                                <xsl:value-of select="@RSA"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@RSV">
                            <xsl:attribute name="RSV">
                                <xsl:value-of select="@RSV"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="ACCOUNT">
                            <ACCOUNT>
                                <xsl:value-of select="ACCOUNT"/>
                            </ACCOUNT>
                        </xsl:if>
                        <xsl:if test="SITE">
                            <SITE>
                                <xsl:value-of select="SITE"/>
                            </SITE>
                        </xsl:if>
                        <xsl:if test="TERM">
                            <TERM>
                                <xsl:value-of select="TERM"/>
                            </TERM>
                        </xsl:if>
                        <xsl:if test="COMMAND">
                            <COMMAND>
                                <xsl:value-of select="COMMAND"/>
                            </COMMAND>
                        </xsl:if>
                        <xsl:if test="RESULT_CODE">
                            <RESULT_CODE>
                                <xsl:value-of select="RESULT_CODE"/>
                            </RESULT_CODE>
                        </xsl:if>
                        <xsl:if test="STATUS_CODE">
                            <STATUS_CODE>
                                <xsl:value-of select="STATUS_CODE"/>
                            </STATUS_CODE>
                        </xsl:if>
                        <xsl:if test="RESPONSE_TEXT">
                            <RESPONSE_TEXT>
                                <xsl:value-of select="RESPONSE_TEXT"/>
                            </RESPONSE_TEXT>
                        </xsl:if>
                        <xsl:if test="RESULT">
                            <RESULT>
                                <xsl:value-of select="RESULT"/>
                            </RESULT>
                        </xsl:if>
                        <xsl:if test="TERMINATION_STATUS">
                            <TERMINATION_STATUS>
                                <xsl:value-of select="TERMINATION_STATUS"/>
                            </TERMINATION_STATUS>
                        </xsl:if>
                        <xsl:if test="AUTH_CODE">
                            <AUTH_CODE>
                                <xsl:value-of select="AUTH_CODE"/>
                            </AUTH_CODE>
                        </xsl:if>
                        <xsl:if test="PAYMENT_MEDIA">
                            <PAYMENT_MEDIA>
                                <xsl:value-of select="PAYMENT_MEDIA"/>
                            </PAYMENT_MEDIA>
                        </xsl:if>
                        <xsl:if test="PAYMENT_TYPE">
                            <PAYMENT_TYPE>
                                <xsl:value-of select="PAYMENT_TYPE"/>
                            </PAYMENT_TYPE>
                        </xsl:if>
                        <xsl:if test="CVV2_CODE">
                            <CVV2_CODE>
                                <xsl:value-of select="CVV2_CODE"/>
                            </CVV2_CODE>
                        </xsl:if>
                        <xsl:if test="AVAIL_BALANCE">
                            <AVAIL_BALANCE>
                                <xsl:value-of select="AVAIL_BALANCE"/>
                            </AVAIL_BALANCE>
                        </xsl:if>
                        <xsl:if test="AUTH_AMOUNT">
                            <AUTH_AMOUNT>
                                <xsl:value-of select="AUTH_AMOUNT"/>
                            </AUTH_AMOUNT>
                        </xsl:if>
                        <xsl:if test="AMOUNT_BALANCE">
                            <AMOUNT_BALANCE>
                                <xsl:value-of select="AMOUNT_BALANCE"/>
                            </AMOUNT_BALANCE>
                        </xsl:if>
                        <xsl:if test="DIFF_AMOUNT_DUE">
                            <DIFF_AMOUNT_DUE>
                                <xsl:value-of select="DIFF_AMOUNT_DUE"/>
                            </DIFF_AMOUNT_DUE>
                        </xsl:if>
                        <xsl:if test="TRANS_AMOUNT">
                            <TRANS_AMOUNT>
                                <xsl:value-of select="TRANS_AMOUNT"/>
                            </TRANS_AMOUNT>
                        </xsl:if>
                        <xsl:if test="ORIG_TRANS_AMOUNT">
                            <ORIG_TRANS_AMOUNT>
                                <xsl:value-of select="ORIG_TRANS_AMOUNT"/>
                            </ORIG_TRANS_AMOUNT>
                        </xsl:if>
                        <xsl:if test="PREVIOUS_BALANCE">
                            <PREVIOUS_BALANCE>
                                <xsl:value-of select="PREVIOUS_BALANCE"/>
                            </PREVIOUS_BALANCE>
                        </xsl:if>
                        <xsl:if test="LOCAL_LOCK_AMOUNT">
                            <LOCAL_LOCK_AMOUNT>
                                <xsl:value-of select="LOCAL_LOCK_AMOUNT"/>
                            </LOCAL_LOCK_AMOUNT>
                        </xsl:if>
                        <xsl:if test="TRANS_SEQ_NUM">
                            <TRANS_SEQ_NUM>
                                <xsl:value-of select="TRANS_SEQ_NUM"/>
                            </TRANS_SEQ_NUM>
                        </xsl:if>
                        <xsl:if test="INTRN_SEQ_NUM">
                            <INTRN_SEQ_NUM>
                                <xsl:value-of select="INTRN_SEQ_NUM"/>
                            </INTRN_SEQ_NUM>
                        </xsl:if>
                        <xsl:if test="ACCT_NUM">
                            <ACCT_NUM>
                                <xsl:value-of select="ACCT_NUM"/>
                            </ACCT_NUM>
                        </xsl:if>
                        <xsl:if test="CTROUTD">
                            <CTROUTD>
                                <xsl:value-of select="CTROUTD"/>
                            </CTROUTD>
                        </xsl:if>
                        <xsl:if test="TROUTD">
                            <TROUTD>
                                <xsl:value-of select="TROUTD"/>
                            </TROUTD>
                        </xsl:if>
                        <xsl:if test="LPTOKEN">
                            <LPTOKEN>
                                <xsl:value-of select="LPTOKEN"/>
                            </LPTOKEN>
                        </xsl:if>
                        <xsl:if test="TA_TOKEN">
                            <TA_TOKEN>
                                <xsl:value-of select="TA_TOKEN"/>
                            </TA_TOKEN>
                        </xsl:if>
                        <xsl:if test="TRANS_DATETIME">
                            <TRANS_DATETIME>
                                <xsl:value-of select="TRANS_DATETIME"/>
                            </TRANS_DATETIME>
                        </xsl:if>
                        <xsl:if test="CARD_CLASS">
                            <CARD_CLASS>
                                <xsl:value-of select="CARD_CLASS"/>
                            </CARD_CLASS>
                        </xsl:if>
                        <xsl:if test="INVOICE">
                            <INVOICE>
                                <xsl:value-of select="INVOICE"/>
                            </INVOICE>
                        </xsl:if>
                        <xsl:if test="DUP_ACCT_NUM">
                            <DUP_ACCT_NUM>
                                <xsl:value-of select="DUP_ACCT_NUM"/>
                            </DUP_ACCT_NUM>
                        </xsl:if>
                        <xsl:if test="DUP_AUTH_CODE">
                            <DUP_AUTH_CODE>
                                <xsl:value-of select="DUP_AUTH_CODE"/>
                            </DUP_AUTH_CODE>
                        </xsl:if>
                        <xsl:if test="DUP_CTROUTD">
                            <DUP_CTROUTD>
                                <xsl:value-of select="DUP_CTROUTD"/>
                            </DUP_CTROUTD>
                        </xsl:if>
                        <xsl:if test="DUP_INVOICE">
                            <DUP_INVOICE>
                                <xsl:value-of select="DUP_INVOICE"/>
                            </DUP_INVOICE>
                        </xsl:if>
                        <xsl:if test="DUP_PAYMENT_MEDIA">
                            <DUP_PAYMENT_MEDIA>
                                <xsl:value-of select="DUP_PAYMENT_MEDIA"/>
                            </DUP_PAYMENT_MEDIA>
                        </xsl:if>
                        <xsl:if test="DUP_TRANS_AMOUNT">
                            <DUP_TRANS_AMOUNT>
                                <xsl:value-of select="DUP_TRANS_AMOUNT"/>
                            </DUP_TRANS_AMOUNT>
                        </xsl:if>
                        <xsl:if test="DUP_DIFF_AMOUNT_DUE">
                            <DUP_DIFF_AMOUNT_DUE>
                                <xsl:value-of select="DUP_DIFF_AMOUNT_DUE"/>
                            </DUP_DIFF_AMOUNT_DUE>
                        </xsl:if>
                        <xsl:if test="DUP_TROUTD">
                            <DUP_TROUTD>
                                <xsl:value-of select="DUP_TROUTD"/>
                            </DUP_TROUTD>
                        </xsl:if>
                    </ns6:UGPRESPONSE>
                </xsl:for-each>
                <OperationScope>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/BWTransformation/OperationScope"/>
                </OperationScope>
                <InterfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </InterfaceCode>
                <TransactionType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/CLE/TransactionType"/>
                </TransactionType>
                <TransactionId>
                    <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                </TransactionId>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ValidatePaymentGatewayResponse-v1">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>385</pd:x>
        <pd:y>197</pd:y>
        <config>
            <processName>/BusinessProcesses/SvcBalanceInquiry/ResponseProcessors/ValidatePaymentGatewayResponse.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <paymentgatewayresponse>
                    <xsl:value-of select="$Start/root/paymentgatewayresponse"/>
                </paymentgatewayresponse>
                <transactionid>
                    <xsl:value-of select="$Start/root/pfx3:SvcBalanceInquiryRequest/SystemContext/TransactionId"/>
                </transactionid>
                <xsl:copy-of select="$Start/root/pfx3:SvcBalanceInquiryRequest"/>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetSubCodeForCardClass">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>707</pd:x>
        <pd:y>61</pd:y>
        <config>
            <variableConfig>/SharedResources/SharedVariables/SV-PaymentServiceSVCCardClasss.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="NotifySupport">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>552</pd:x>
        <pd:y>263</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/NotifySupport.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <InterfaceCode>
                    <xsl:value-of select="$GetCLEParams/root/InterfaceCode"/>
                </InterfaceCode>
                <ExceptionCode>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/PaymentService/NotificationErrorCodes/PAYMENT_GATEWAY_RESPONSE_VALIDATION_ERROR"/>
                </ExceptionCode>
                <ErrorMessage>
                    <xsl:value-of select="concat($ValidatePaymentGatewayResponse-v1/root/pfx3:SvcBalanceInquiryResponse/Error/Detail[1],  $_globalVariables/ns:GlobalVariables/PaymentService/CLE/ErrorMessageSeparator   ,  $ValidatePaymentGatewayResponse-v1/root/pfx3:SvcBalanceInquiryResponse/Error/ErrorMessage)"/>
                </ErrorMessage>
                <TransactionType>
                    <xsl:value-of select="$_globalVariables/ns:GlobalVariables/SvcBalanceInquiry/CLE/TransactionType"/>
                </TransactionType>
                <TransactionId>
                    <xsl:value-of select="$GetCLEParams/root/TransactionId"/>
                </TransactionId>
                <Payload>
                    <xsl:value-of select="tib:render-xml($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE)"/>
                </Payload>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>GetCLEParams</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapPaymentServiceResponse</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidatePaymentGatewayResponse-v1</pd:from>
        <pd:to>NotifySupport</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>MapErrorResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogRequestValidationExceptionRequest</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapErrorResponse</pd:from>
        <pd:to>LogRequestValidationExceptionRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetCLEParams</pd:from>
        <pd:to>ValidatePaymentGatewayResponse-v1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ValidatePaymentGatewayResponse-v1</pd:from>
        <pd:to>ProcessPaymentGatewayResponse</pd:to>
        <pd:xpathDescription>On Response</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ValidatePaymentGatewayResponse-v1/root/ns4:UGPRESPONSE)&gt;0 and
string-length($ValidatePaymentGatewayResponse-v1/root/pfx3:SvcBalanceInquiryResponse) = 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>ProcessPaymentGatewayResponse</pd:from>
        <pd:to>MapPaymentServiceResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ProcessPaymentGatewayResponse</pd:from>
        <pd:to>GetSubCodeForCardClass</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$ProcessPaymentGatewayResponse/root/Success</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetSubCodeForCardClass</pd:from>
        <pd:to>MapPaymentServiceResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>NotifySupport</pd:from>
        <pd:to>MapPaymentServiceResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:label>
        <pd:name>Label</pd:name>
        <pd:description>Map Payment Gateway Response to Payment Service Response Mapping here </pd:description>
        <pd:x>922</pd:x>
        <pd:y>77</pd:y>
        <pd:width>191</pd:width>
        <pd:height>65</pd:height>
        <pd:fontColor>-16777216</pd:fontColor>
        <pd:color>-6684775</pd:color>
        <pd:type>solid</pd:type>
        <pd:thickness>0</pd:thickness>
        <pd:fade>true</pd:fade>
    </pd:label>
</pd:ProcessDefinition>