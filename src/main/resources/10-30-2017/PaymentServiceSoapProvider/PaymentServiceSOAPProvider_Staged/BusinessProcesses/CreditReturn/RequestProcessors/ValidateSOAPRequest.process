<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx="http://services.wsgc.com/2014/Payment" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns="http://www.ultimosoft.com/CLEH/ExceptionHandler.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns2="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns3="http://www.wsgc.com/schemas/common/PaymentServiceValidations.xsd" xmlns:ns4="http://www.wsgc.com/schemas/common/PaymentServiceErrorTypes.xsd" xmlns:pfx3="http://services.wsgc.com/soap/paymentservice.wsdl" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx4="http://www.tibco.com/schemas/Payment Services/CreditAuthRequest.xsd" xmlns:pfx5="http://ecommerce.wsgc.com/2013/Common" xmlns:pfx6="http://www.sterlingcommerce.com/documentation/YFS/CCRefund/Request" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx7="http://www.wsgc.com/schemas/service/PaymentError.xsd" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:pfx71="http://www.sterlingcommerce.com/documentation/YFS/CCSettlement/Request" xmlns:pfx61="http://www.sterlingcommerce.com/documentation/YFS/SVCRedemption/Request">
    <xsd:import namespace="http://www.tibco.com/schemas/Payment Services/CreditAuthRequest.xsd" schemaLocation="/SharedResources/XMLSchemas/Sterling/CreditAuthRequest.xsd"/>
    <xsd:import namespace="http://ecommerce.wsgc.com/2013/Common" schemaLocation="/SharedResources/XMLSchemas/PaymentServices/2013/Common/base-types.xsd"/>
    <xsd:import namespace="http://services.wsgc.com/2014/Payment" schemaLocation="/SharedResources/XMLSchemas/PaymentServices/2014/Payment/credit-return.xsd"/>
    <xsd:import namespace="http://www.sterlingcommerce.com/documentation/YFS/CCRefund/Request" schemaLocation="/SharedResources/XMLSchemas/Sterling/Payment/CreditCardRefundRequest.xsd"/>
    <xsd:import namespace="http://www.wsgc.com/schemas/service/PaymentError.xsd" schemaLocation="/SharedResources/XMLSchemas/PaymentServiceInternal/PaymentErrorSchema.xsd"/>
    <wsdl:import namespace="http://services.wsgc.com/soap/paymentservice.wsdl" location="/WSDL/PaymentServices.wsdl"/>
    <pd:name>BusinessProcesses/CreditReturn/RequestProcessors/ValidateSOAPRequest.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType wsMsgRef="pfx3:CreditReturnRequest"/>
    <pd:startX>34</pd:startX>
    <pd:startY>196</pd:startY>
    <pd:returnBindings>
        <root>
            <xsl:if test="string-length($Process/root/Error/Type) > 0">
                <pfx:CreditCardReturnResponse>
                    <xsl:attribute name="version">
                        <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/Return/MessageVersion"/>
                    </xsl:attribute>
                    <SystemContext>
                        <EnvironmentIdentifier>
                            <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SystemContext/EnvironmentIdentifier"/>
                        </EnvironmentIdentifier>
                        <RegionIdentifier>
                            <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SystemContext/RegionIdentifier"/>
                        </RegionIdentifier>
                        <SourceSystemIdentifier>
                            <xsl:value-of select="concat($_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SystemContext/SourceSystemIdentifierPrefix,BW:getHostName())"/>
                        </SourceSystemIdentifier>
                        <xsl:choose>
                            <xsl:when test="string-length($Start/pfx3:CreditReturnRequest/Request/pfx6:Payment/@MsgTransactionID)>0">
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns2:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,$Start/pfx3:CreditReturnRequest/Request/pfx6:Payment/@MsgTransactionID)"/>
                                </TransactionId>
                            </xsl:when>
                            <xsl:otherwise>
                                <TransactionId>
                                    <xsl:value-of select="concat($_globalVariables/ns2:GlobalVariables/Return/Constants/TransactionIdPrefix,&quot;-&quot;,tib:format-dateTime($_globalVariables/ns2:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   $_processContext/ns1:ProcessContext/ProcessId,  $_globalVariables/ns2:GlobalVariables/ENV,BW:getHostName())"/>
                                </TransactionId>
                            </xsl:otherwise>
                        </xsl:choose>
                        <TransactionTime>
                            <xsl:value-of select="current-dateTime()"/>
                        </TransactionTime>
                    </SystemContext>
                    <xsl:choose>
                        <xsl:when test="string-length($Start/pfx3:CreditReturnRequest/Request/pfx6:Payment/@EnterpriseCode)>0">
                            <PaymentContext>
                                <Concept>
                                    <xsl:value-of select="$Start/pfx3:CreditReturnRequest/Request/pfx6:Payment/@EnterpriseCode"/>
                                </Concept>
                                <Channel>
                                    <xsl:value-of select="$Start/pfx3:CreditReturnRequest/Request/pfx6:Payment/@EntryType"/>
                                </Channel>
                            </PaymentContext>
                        </xsl:when>
                        <xsl:otherwise>
                            <PaymentContext>
                                <Concept>
                                    <xsl:value-of select="&quot;&quot;"/>
                                </Concept>
                                <Channel>
                                    <xsl:value-of select="&quot;&quot;"/>
                                </Channel>
                            </PaymentContext>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:for-each select="$Process/root/Error">
                        <Error>
                            <Type>
                                <xsl:value-of select="Type"/>
                            </Type>
                            <xsl:for-each select="Detail">
                                <Detail>
                                    <xsl:value-of select="."/>
                                </Detail>
                            </xsl:for-each>
                            <ErrorMessage>
                                <xsl:value-of select="ErrorMessage"/>
                            </ErrorMessage>
                        </Error>
                    </xsl:for-each>
                </pfx:CreditCardReturnResponse>
            </xsl:if>
            <xsl:if test="string-length($Process/root/Error/Type) = 0">
                <xsl:copy-of select="$MapSOAPRequestToPaymentServiceRequest/pfx:CreditCardReturnRequest"/>
            </xsl:if>
            <xsl:if test="$Process/root/TransactionId">
                <TransactionId>
                    <xsl:value-of select="$Process/root/TransactionId"/>
                </TransactionId>
            </xsl:if>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:CreditCardReturnResponse" minOccurs="0"/>
                    <xsd:element ref="pfx:CreditCardReturnRequest" minOccurs="0"/>
                    <xsd:element name="TransactionId" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>915</pd:endX>
    <pd:endY>351</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables>
        <Process>
            <xsd:element name="root">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="Error" type="pfx5:ErrorType"/>
                        <xsd:element name="TransactionId" type="xsd:string" minOccurs="0"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </Process>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1414172991752</pd:targetNamespace>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>311</pd:x>
        <pd:y>481</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="LogRequestValidationExceptionRequest">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>859</pd:x>
        <pd:y>481</pd:y>
        <config>
            <processName>/CommonProcesses/CLEClientStub/SendExceptionRequest.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns:ExceptionHandlerRequest>
                <ns:envCode>
                    <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/ENV"/>
                </ns:envCode>
                <ns:appCode>
                    <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/CLE/AppCode"/>
                </ns:appCode>
                <ns:interfaceCode>
                    <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/Return/CLE/SoapInterfaceCode"/>
                </ns:interfaceCode>
                <ns:hostName>
                    <xsl:value-of select="BW:getHostName()"/>
                </ns:hostName>
                <ns:timeStamp>
                    <xsl:value-of select="current-dateTime()"/>
                </ns:timeStamp>
                <ns:message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </ns:message>
                <ns:ErrorLevel>
                    <ns:errorCode>
                        <xsl:value-of select="concat($Process/root/Error/Type, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/ErrorCodeSeparator,&#xA;$Process/root/Error/Detail[1])"/>
                    </ns:errorCode>
                </ns:ErrorLevel>
                <ns:TransactionDetails>
                    <ns:transactionDomain>
                        <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CLE/TransactionDomain"/>
                    </ns:transactionDomain>
                    <ns:transactionType>
                        <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/Return/CLE/TransactionType"/>
                    </ns:transactionType>
                    <ns:transactionID>
                        <xsl:value-of select="$Process/root/TransactionId"/>
                    </ns:transactionID>
                </ns:TransactionDetails>
                <xsl:for-each select="$_error/ns1:ErrorReport">
                    <ns:ErrorReportType>
                        <ns:stackTrace>
                            <xsl:value-of select="StackTrace"/>
                        </ns:stackTrace>
                        <ns:msg>
                            <xsl:value-of select="Msg"/>
                        </ns:msg>
                        <ns:fullClass>
                            <xsl:value-of select="FullClass"/>
                        </ns:fullClass>
                        <ns:class>
                            <xsl:value-of select="Class"/>
                        </ns:class>
                        <ns:processStack>
                            <xsl:value-of select="ProcessStack"/>
                        </ns:processStack>
                        <xsl:if test="MsgCode">
                            <ns:msgCode>
                                <xsl:value-of select="MsgCode"/>
                            </ns:msgCode>
                        </xsl:if>
                        <ns:data>
                            <xsl:value-of select="Data/*"/>
                        </ns:data>
                    </ns:ErrorReportType>
                </xsl:for-each>
            </ns:ExceptionHandlerRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapSOAPRequestToPaymentServiceRequest">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>909</pd:x>
        <pd:y>52</pd:y>
        <config>
            <element ref="pfx:CreditCardReturnRequest"/>
        </config>
        <pd:inputBindings>
            <pfx:CreditCardReturnRequest>
                <xsl:attribute name="version">
                    <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/Return/MessageVersion"/>
                </xsl:attribute>
                <SystemContext>
                    <EnvironmentIdentifier>
                        <xsl:value-of select="$ParseXML/pfx6:Payment/@EnvIdentifier"/>
                    </EnvironmentIdentifier>
                    <RegionIdentifier>
                        <xsl:value-of select="$ParseXML/pfx6:Payment/@RegIdentifier"/>
                    </RegionIdentifier>
                    <SourceSystemIdentifier>
                        <xsl:value-of select="$ParseXML/pfx6:Payment/@SourceSysID"/>
                    </SourceSystemIdentifier>
                    <TransactionId>
                        <xsl:value-of select="$ParseXML/pfx6:Payment/@MsgTransactionID"/>
                    </TransactionId>
                    <TransactionTime>
                        <xsl:value-of select="$ParseXML/pfx6:Payment/@MsgTransactionTime"/>
                    </TransactionTime>
                </SystemContext>
                <PaymentContext>
                    <Concept>
                        <xsl:value-of select="$ParseXML/pfx6:Payment/@EnterpriseCode"/>
                    </Concept>
                    <Channel>
                        <xsl:value-of select="$ParseXML/pfx6:Payment/@EntryType"/>
                    </Channel>
                </PaymentContext>
                <OrderContext>
                    <xsl:attribute name="omsOrderId">
                        <xsl:value-of select="$RemoveUnwantedCharacters/root/TargetString"/>
                    </xsl:attribute>
                    <OrderTime>
                        <xsl:value-of select="current-dateTime()"/>
                    </OrderTime>
                </OrderContext>
                <ConsumerTransactionId>
                    <xsl:value-of select="$ParseXML/pfx6:Payment/@ChargeTransactionKey"/>
                </ConsumerTransactionId>
                <xsl:if test="string-length($ParseXML/pfx6:Payment/@OriginalTranRequestTime)>0">
                    <OriginalRequest>
                        <TransactionTime>
                            <xsl:value-of select="$ParseXML/pfx6:Payment/@OriginalTranRequestTime"/>
                        </TransactionTime>
                    </OriginalRequest>
                </xsl:if>
                <Tender>
                    <Type>
                        <xsl:choose>
                            <xsl:when test="$ParseXML/pfx6:Payment/@PaymentType=$_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/PLCCPaymentType or $ParseXML/pfx6:Payment/@PaymentType=$_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/CCPaymentType">
                                <Code>
                                    <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/CCPaymentType"/>
                                </Code>
                            </xsl:when>
                            <xsl:otherwise>
                                <Code>
                                    <xsl:value-of select="$ParseXML/pfx6:Payment/@PaymentType"/>
                                </Code>
                            </xsl:otherwise>
                        </xsl:choose>
                        <SubCode>
                            <xsl:value-of select="$ParseXML/pfx6:Payment/@PaymentReference3"/>
                        </SubCode>
                        <xsl:for-each select="tib:tokenize($ParseXML/pfx6:Payment/@ExtnPaymentTag,&quot;,&quot;)">
                            <Tag>
                                <xsl:attribute name="type">
                                    <xsl:value-of select="substring-before(current(),&quot;=&quot;)"/>
                                </xsl:attribute>
                                <xsl:value-of select="substring-after(current(),&quot;=&quot;)"/>
                            </Tag>
                        </xsl:for-each>
                    </Type>
                    <xsl:choose>
                        <xsl:when test="string-length($ParseXML/pfx6:Payment/@ExtnPaymentToken)>0">
                            <Token>
                                <xsl:attribute name="scheme">
                                    <xsl:value-of select="substring-after(tib:tokenize($ParseXML/pfx6:Payment/@PaymentReference8, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SterlingPaymentReferenceTokenizer)[1], $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/SchemeKey)"/>
                                </xsl:attribute>
                                <xsl:attribute name="scope">
                                    <xsl:value-of select="substring-after(tib:tokenize($ParseXML/pfx6:Payment/@PaymentReference8, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SterlingPaymentReferenceTokenizer)[2], $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/ScopeKey)"/>
                                </xsl:attribute>
                                <xsl:attribute name="isTemporary">
                                    <xsl:value-of select="substring-after(tib:tokenize($ParseXML/pfx6:Payment/@PaymentReference8, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SterlingPaymentReferenceTokenizer)[3], $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/IsTempKey)"/>
                                </xsl:attribute>
                                <xsl:attribute name="expiration">
                                    <xsl:value-of select="$ParseXML/pfx6:Payment/@PaymentReference7"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ParseXML/pfx6:Payment/@ExtnPaymentToken"/>
                            </Token>
                        </xsl:when>
                        <xsl:otherwise>
                            <Token>
                                <xsl:attribute name="scheme">
                                    <xsl:value-of select="substring-after(tib:tokenize($ParseXML/pfx6:Payment/@PaymentReference8, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SterlingPaymentReferenceTokenizer)[1], $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/SchemeKey)"/>
                                </xsl:attribute>
                                <xsl:attribute name="scope">
                                    <xsl:value-of select="substring-after(tib:tokenize($ParseXML/pfx6:Payment/@PaymentReference8, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SterlingPaymentReferenceTokenizer)[2], $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/ScopeKey)"/>
                                </xsl:attribute>
                                <xsl:attribute name="isTemporary">
                                    <xsl:value-of select="substring-after(tib:tokenize($ParseXML/pfx6:Payment/@PaymentReference8, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SterlingPaymentReferenceTokenizer)[3], $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/IsTempKey)"/>
                                </xsl:attribute>
                                <xsl:attribute name="expiration">
                                    <xsl:value-of select="$ParseXML/pfx6:Payment/@PaymentReference7"/>
                                </xsl:attribute>
                                <xsl:value-of select="$ParseXML/pfx6:Payment/@CreditCardNo"/>
                            </Token>
                        </xsl:otherwise>
                    </xsl:choose>
                </Tender>
                <CardMetadata>
                    <CardHolderName>
                        <FullName>
                            <xsl:value-of select="$ParseXML/pfx6:Payment/@CreditCardName"/>
                        </FullName>
                    </CardHolderName>
                    <CardExpiration>
                        <Year>
                            <xsl:value-of select="substring-after($ParseXML/pfx6:Payment/@CreditCardExpirationDate, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/CreditCardExpirationSeparator)"/>
                        </Year>
                        <Month>
                            <xsl:value-of select="substring-before($ParseXML/pfx6:Payment/@CreditCardExpirationDate, $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/CreditCardExpirationSeparator)"/>
                        </Month>
                    </CardExpiration>
                </CardMetadata>
                <CurrencyCode>
                    <xsl:value-of select="$ParseXML/pfx6:Payment/@Currency"/>
                </CurrencyCode>
                <ReturnAmount>
                    <xsl:value-of select="abs($ParseXML/pfx6:Payment/@RequestAmount)"/>
                </ReturnAmount>
                <xsl:if test="$ParseXML/pfx6:Payment/@PaymentType = $_globalVariables/ns2:GlobalVariables/PaymentService/Constants/SOAP/PLCCPaymentType">
                    <xsl:if test="$ParseXML/pfx6:Payment/@PaymentReference4">
                        <PaymentPlanCode>
                            <xsl:value-of select="$ParseXML/pfx6:Payment/@PaymentReference4"/>
                        </PaymentPlanCode>
                    </xsl:if>
                </xsl:if>
            </pfx:CreditCardReturnRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseXML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>529</pd:x>
        <pd:y>50</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx6:Payment"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="tib:render-xml($Start/pfx3:CreditReturnRequest/Request/pfx6:Payment)"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Validate">
        <pd:type>com.tibco.plugin.xml.XMLTransformActivity</pd:type>
        <pd:resourceType>ae.activities.XMLTransformActivity</pd:resourceType>
        <pd:x>370</pd:x>
        <pd:y>201</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <engine>Saxon</engine>
        </config>
        <pd:inputBindings>
            <textInput>
                <xmlString>
                    <xsl:value-of select="tib:render-xml($Start/pfx3:CreditReturnRequest/Request/pfx6:Payment)"/>
                </xmlString>
                <stylesheet>
                    <xsl:value-of select="$GetVariable/ns3:PaymentServiceValidations/ns3:PaymentServiceValidation[ns3:RuleName = $_globalVariables/ns2:GlobalVariables/Return/Validation/SoapRequestValidationXslt]/ns3:RuleContent"/>
                </stylesheet>
                <parameter>
                    <name>
                        <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/ValidationConstants/XSLT_VALIDATION_PARAM"/>
                    </name>
                    <value>
                        <xsl:value-of select="tib:render-xml($GetPaymentErrorType/ns4:PaymentServiceErrorTypes)"/>
                    </value>
                    <isXMLDocument>
                        <xsl:value-of select="true()"/>
                    </isXMLDocument>
                </parameter>
                <parameter>
                    <name>
                        <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/ValidationConstants/XSLT_ENVID_PARAM"/>
                    </name>
                    <value>
                        <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/TokenConstants/EnvId"/>
                    </value>
                    <isXMLDocument>
                        <xsl:value-of select="false()"/>
                    </isXMLDocument>
                </parameter>
            </textInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetVariable">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>220</pd:x>
        <pd:y>199</pd:y>
        <config>
            <variableConfig>/SharedResources/SharedVariables/SV-PaymentServiceValidations.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ParseValidationResponse">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>529</pd:x>
        <pd:y>199</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx7:Errors"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Validate/xmlString"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Assign">
        <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
        <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
        <pd:x>509</pd:x>
        <pd:y>477</pd:y>
        <config>
            <variableName>Process</variableName>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:choose>
                    <xsl:when test="$_error/ns1:ErrorReport/Class=$_globalVariables/ns2:GlobalVariables/PaymentService/ValidationConstants/BIND_EXCEPTION_CLASS">
                        <Error>
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Type"/>
                            </Type>
                            <Detail>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Detail"/>
                            </Detail>
                            <ErrorMessage>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/ErrorMessage"/>
                            </ErrorMessage>
                        </Error>
                    </xsl:when>
                    <xsl:when test="$_error/ns1:ErrorReport/Class=$_globalVariables/ns2:GlobalVariables/PaymentService/ValidationConstants/XML_TRANSFORMATION_EXCEPTION_CLASS">
                        <Error>
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Type"/>
                            </Type>
                            <Detail>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/Detail"/>
                            </Detail>
                            <ErrorMessage>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST/ErrorMessage"/>
                            </ErrorMessage>
                        </Error>
                    </xsl:when>
                    <xsl:otherwise>
                        <Error>
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Type"/>
                            </Type>
                            <Detail>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/Detail"/>
                            </Detail>
                            <ErrorMessage>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/SAFE_FAILURE/ErrorMessage"/>
                            </ErrorMessage>
                        </Error>
                    </xsl:otherwise>
                </xsl:choose>
                <TransactionId>
                    <xsl:value-of select="concat($_globalVariables/ns2:GlobalVariables/Return/Constants/TransactionIdPrefix,&#xA;tib:format-dateTime($_globalVariables/ns2:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   &#xA;BW:getHostName())"/>
                </TransactionId>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetPaymentErrorType">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>220</pd:x>
        <pd:y>94</pd:y>
        <config>
            <variableConfig>/SharedResources/SharedVariables/SV-PaymentServiceErrorTypes.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="AssignError">
        <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
        <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
        <pd:x>531</pd:x>
        <pd:y>350</pd:y>
        <config>
            <variableName>Process</variableName>
        </config>
        <pd:inputBindings>
            <root>
                <Error>
                    <xsl:choose xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                        <xsl:when test="string-length($ParseValidationResponse/pfx7:Errors/pfx7:Error[./pfx7:Type=$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INCOMPLETE_REQUEST_MULTIPLE_ISSUES/Type])>0&#xA;and&#xA;string-length($ParseValidationResponse/pfx7:Errors/pfx7:Error[./pfx7:Type=$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST_MULTIPLE_ISSUES/Type])>0">
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INCOMPLETE_INVALID_REQUEST_MULTIPLE_ISSUES/Type"/>
                            </Type>
                        </xsl:when>
                        <xsl:when test="string-length($ParseValidationResponse/pfx7:Errors/pfx7:Error[./pfx7:Type=$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INCOMPLETE_REQUEST_MULTIPLE_ISSUES/Type])>0">
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INCOMPLETE_REQUEST_MULTIPLE_ISSUES/Type"/>
                            </Type>
                        </xsl:when>
                        <xsl:when test="string-length($ParseValidationResponse/pfx7:Errors/pfx7:Error[./pfx7:Type=$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_TOKEN/Type])>0">
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_TOKEN/Type"/>
                            </Type>
                        </xsl:when>
                        <xsl:otherwise>
                            <Type>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/INVALID_REQUEST_MULTIPLE_ISSUES/Type"/>
                            </Type>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$ParseValidationResponse/pfx7:Errors/pfx7:Error/pfx7:Detail">
                        <Detail>
                            <xsl:value-of select="."/>
                        </Detail>
                    </xsl:for-each>
                    <xsl:variable name="ErrMsg" select="tib:concat-sequence-format($ParseValidationResponse/pfx7:Errors/pfx7:Error/pfx7:ErrorMessage ,$_globalVariables/ns2:GlobalVariables/PaymentService/Constants/ErrorCodeSeparator,true())"/>
                    <xsl:choose>
                        <xsl:when test="string-length($ErrMsg)&lt;=200">
                            <ErrorMessage>
                                <xsl:value-of select="$ErrMsg"/>
                            </ErrorMessage>
                        </xsl:when>
                        <xsl:otherwise>
                            <ErrorMessage>
                                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/CommonErrors/GENERIC_ERROR/InvIncompleteReqErr"/>
                            </ErrorMessage>
                        </xsl:otherwise>
                    </xsl:choose>
                </Error>
                <TransactionId>
                    <xsl:value-of select="concat($_globalVariables/ns2:GlobalVariables/Return/Constants/TransactionIdPrefix,&#xA;tib:format-dateTime($_globalVariables/ns2:GlobalVariables/PaymentService/Constants/DateTimeFormat, current-dateTime()),   &#xA;BW:getHostName())"/>
                </TransactionId>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="RemoveUnwantedCharacters">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>720</pd:x>
        <pd:y>53</pd:y>
        <config>
            <processName>/BusinessProcesses/Common/RemoveUnwantedCharacters.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <SourceString>
                    <xsl:value-of select="$ParseXML/pfx6:Payment/@OrderNo"/>
                </SourceString>
                <RegexOfCharactersToRemove>
                    <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/PaymentService/Constants/RegexForAlpha"/>
                </RegexOfCharactersToRemove>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Assign</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapSOAPRequestToPaymentServiceRequest</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetVariable</pd:from>
        <pd:to>Validate</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseXML</pd:from>
        <pd:to>RemoveUnwantedCharacters</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Validate</pd:from>
        <pd:to>ParseValidationResponse</pd:to>
        <pd:xpathDescription/>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseValidationResponse</pd:from>
        <pd:to>ParseXML</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogRequestValidationExceptionRequest</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Assign</pd:from>
        <pd:to>LogRequestValidationExceptionRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseValidationResponse</pd:from>
        <pd:to>AssignError</pd:to>
        <pd:xpathDescription>Failed</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ParseValidationResponse/pfx7:Errors/pfx7:Error[1]/pfx7:Type)&gt;0
or 
string-length($ParseValidationResponse/pfx7:Errors/pfx7:Error[1]/pfx7:Detail)&gt;0
or
string-length($ParseValidationResponse/pfx7:Errors/pfx7:Error[1]/pfx7:ErrorMessage[1])&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>GetVariable</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>GetPaymentErrorType</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPaymentErrorType</pd:from>
        <pd:to>Validate</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AssignError</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>RemoveUnwantedCharacters</pd:from>
        <pd:to>MapSOAPRequestToPaymentServiceRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:label>
        <pd:name>Label</pd:name>
        <pd:description>Transform SOAP to Xml here</pd:description>
        <pd:x>1038</pd:x>
        <pd:y>92</pd:y>
        <pd:width>191</pd:width>
        <pd:height>40</pd:height>
        <pd:fontColor>-16777216</pd:fontColor>
        <pd:color>-3342388</pd:color>
        <pd:type>solid</pd:type>
        <pd:thickness>0</pd:thickness>
        <pd:fade>true</pd:fade>
    </pd:label>
</pd:ProcessDefinition>